class Diamond(top: SsaBlock, cond: SsaInstr) {
	def tblock = SsaBlock.new();
	def fblock = SsaBlock.new();
	def merge = SsaBlock.new();
	new() {
		top.append(SsaIf.new(cond, tblock, fblock));
		tblock.append(SsaGoto.new(merge));
		fblock.append(SsaGoto.new(merge));
	}
	def phi(t: Type, tv: SsaInstr, fv: SsaInstr) -> SsaPhi {
		var phi = SsaPhi.new(t, merge, [tv, fv]);
		merge.prepend(phi);
		return phi;
	}
}

// A helper for building SSA graphs and instructions.
component SsaGraphBuildingHelper {
	def unop(op: Operator, x: SsaInstr) -> SsaInstr {
		var i = SsaApplyOp.new(null, op, [x]);
		i.setFact(Operators.facts(op.opcode));
		return i;
	}
	def binop(op: Operator, x: SsaInstr, y: SsaInstr) -> SsaInstr {
		var i = SsaApplyOp.new(null, op, [x, y]);
		i.setFact(Operators.facts(op.opcode));
		return i;
	}
	def triop(op: Operator, x: SsaInstr, y: SsaInstr, z: SsaInstr) -> SsaInstr {
		var i = SsaApplyOp.new(null, op, [x, y, z]);
		i.setFact(Operators.facts(op.opcode));
		return i;
	}
	def EQUAL(t: Type, x: SsaInstr, y: SsaInstr) -> SsaInstr {
		return binop(V3Op.newEqual(t), x, y);
	}
	def NOT_EQUAL(t: Type, x: SsaInstr, y: SsaInstr) -> SsaInstr {
		return unop(V3Op.opBoolNot, binop(V3Op.newEqual(t), x, y));
	}

	def INT32_ADD = binop(Int.TYPE.lookupInfix0(V3Infix.Add), _, _);
	def INT32_SUB = binop(Int.TYPE.lookupInfix0(V3Infix.Sub), _, _);
	def INT32_MUL = binop(Int.TYPE.lookupInfix0(V3Infix.Mul), _, _);
	def INT32_DIV = binop(Int.TYPE.lookupInfix0(V3Infix.Div), _, _);
	def INT32_MOD = binop(Int.TYPE.lookupInfix0(V3Infix.Mod), _, _);
	def INT32_AND = binop(Int.TYPE.lookupInfix0(V3Infix.And), _, _);
	def INT32_OR  = binop(Int.TYPE.lookupInfix0(V3Infix.Or), _, _);
	def INT32_XOR = binop(Int.TYPE.lookupInfix0(V3Infix.Xor), _, _);
	def INT32_SHL = binop(Int.TYPE.lookupInfix0(V3Infix.Shl), _, _);
	def INT32_SHR = binop(Int.TYPE.lookupInfix0(V3Infix.Shr), _, _);
	def INT32_SAR = binop(Int.TYPE.lookupInfix0(V3Infix.Sar), _, _);
	def INT32_LT  = binop(Int.TYPE.lookupInfix0(V3Infix.Lt), _, _);
	def INT32_LE  = binop(Int.TYPE.lookupInfix0(V3Infix.Lteq), _, _);

	def INT64_ADD = binop(Long.TYPE.lookupInfix0(V3Infix.Add), _, _);
	def INT64_SUB = binop(Long.TYPE.lookupInfix0(V3Infix.Sub), _, _);
	def INT64_MUL = binop(Long.TYPE.lookupInfix0(V3Infix.Mul), _, _);
	def INT64_DIV = binop(Long.TYPE.lookupInfix0(V3Infix.Div), _, _);
	def INT64_MOD = binop(Long.TYPE.lookupInfix0(V3Infix.Mod), _, _);
	def INT64_AND = binop(Long.TYPE.lookupInfix0(V3Infix.And), _, _);
	def INT64_OR  = binop(Long.TYPE.lookupInfix0(V3Infix.Or), _, _);
	def INT64_XOR = binop(Long.TYPE.lookupInfix0(V3Infix.Xor), _, _);
	def INT64_SHL = binop(Long.TYPE.lookupInfix0(V3Infix.Shl), _, _);
	def INT64_SHR = binop(Long.TYPE.lookupInfix0(V3Infix.Shr), _, _);
	def INT64_SAR = binop(Long.TYPE.lookupInfix0(V3Infix.Sar), _, _);
	def INT64_LT  = binop(Long.TYPE.lookupInfix0(V3Infix.Lt), _, _);
	def INT64_LE  = binop(Long.TYPE.lookupInfix0(V3Infix.Lteq), _, _);

	def BOOL_AND = binop(V3Op.opBoolAnd, _, _);
	def BOOL_OR = binop(V3Op.opBoolOr, _, _);
	def BOOL_NOT = unop(V3Op.opBoolNot, _);

	def CONDITIONAL_THROW(exception: string, x: SsaInstr) -> SsaInstr {
		return SsaApplyOp.new(null, V3Op.newConditionalThrow(exception), [x]);
	}
	def TYPECAST(ft: Type, tt: Type, x: SsaInstr) -> SsaInstr {
		return unop(V3Op.newTypeCast(ft, tt), x);
	}
	def TYPEQUERY(ft: Type, tt: Type, x: SsaInstr) -> SsaInstr {
		return unop(V3Op.newTypeQuery(ft, tt), x);
	}

	def TEST_CLASS_TYPE = V3.stringType;
	def IMM_FIELD = makeIrField(TEST_CLASS_TYPE, Int.TYPE, Fact.F_VALUE);
	def MUT_FIELD = makeIrField(TEST_CLASS_TYPE, Int.TYPE, Facts.NONE);
	def CLASS_GET_FIELD = unop(V3Op.newClassGetField(MUT_FIELD), _);
	def CLASS_SET_FIELD = binop(V3Op.newClassSetField(MUT_FIELD), _, _);

	def CALL_CLOSURE(ftype: Type, x: Array<SsaInstr>) -> SsaInstr {
		return SsaApplyOp.new(null, V3Op.newCallClosure(ftype), x);
	}
	def CALL_METHOD(m: IrSpec, x: Array<SsaInstr>) -> SsaInstr {
		return SsaApplyOp.new(null, V3Op.newCallMethod(m), x);
	}
	def CALL_CLASS_VIRTUAL(m: IrSpec, x: Array<SsaInstr>) -> SsaInstr {
		return SsaApplyOp.new(null, V3Op.newCallClassVirtual(m), x);
	}
	def CLASS_GET_METHOD(m: IrSpec, o: SsaInstr) -> SsaInstr {
		return SsaApplyOp.new(null, V3Op.newClassGetMethod(m), [o]);
	}
	def CLASS_GET_VIRTUAL(m: IrSpec, o: SsaInstr) -> SsaInstr {
		return SsaApplyOp.new(null, V3Op.newClassGetVirtual(m), [o]);
	}
	def COMPONENT_GET_METHOD(m: IrSpec, o: SsaInstr) -> SsaInstr {
		return SsaApplyOp.new(null, V3Op.newComponentGetMethod(m), [o]);
	}
	def CREATE_CLOSURE(m: IrSpec, ftype: Type, o: SsaInstr) -> SsaInstr {
		return SsaApplyOp.new(null, V3Op.newCreateClosure(m, ftype), [o]);
	}
	def TUPLE_GET_ELEM(index: int, x: SsaInstr) -> SsaInstr {
		return unop(V3Op.newTupleGetElem(x.getType(), index), x);
	}
	def VARIANT_GET_TAG(t: Type, x: SsaInstr) -> SsaInstr {
		return unop(V3Op.newVariantGetTag(t), x);
	}

	def ARRAY_ALLOC = unop(V3Op.newArrayAlloc(V3.stringType), _);
	def ARRAY_GET_ELEM = binop(V3Op.newArrayGetElem(V3.stringType), _, _);
	def ARRAY_SET_ELEM = triop(V3Op.newArrayGetElem(V3.stringType), _, _, _);
	def ARRAY_GET_LENGTH = unop(V3Op.newArrayGetLength(V3.stringType), _);
	def ARRAY_INIT(instrs: Array<SsaInstr>) -> SsaInstr {
		var op = V3Op.newArrayInit(V3.stringType, instrs.length);
		var i = SsaApplyOp.new(null, op, instrs);
		i.setFact(Operators.facts(op.opcode));
		return i;
	}
	def newTupleType(len: int) -> Type {
		var l: List<Type>;
		for (i < len) l = List.new(Int.TYPE, l);
		return Tuple.newType(l);
	}
	def TUPLE_CREATE(instrs: Array<SsaInstr>) -> SsaInstr {
		var op = V3Op.newTupleCreate(newTupleType(instrs.length));
		var i = SsaApplyOp.new(null, op, instrs);
		i.setFact(Operators.facts(op.opcode));
		return i;
	}

	def BOUNDS_CHECK = binop(V3Op.newBoundsCheck(V3.stringType), _, _);

	def makeIrField(container: Type, fieldType: Type, facts: Fact.set) -> IrSpec {
		var field = IrField.new(container, fieldType);
		field.facts = facts;
		field.index = 0;
		return IrSpec.new(container, [container], field);
	}
	def makeIrMethod(container: Type, typeArgs: TypeArgs, paramTypes: Array<Type>, returnType: Type) -> IrSpec {
		var method = IrMethod.new(container, typeArgs, Function.siga(paramTypes, returnType));
		method.index = 0;
		return IrSpec.new(container, [container], method);
	}
	def newComponentType(name: string) -> Type {
		def token = Token.new("<internal>", name, 1, 1);
		def decl = VstComponent.new(token, null);
		def typecon = V3Component_TypeCon.new(decl, TypeCache.new());
		return typecon.create0();
	}
	def newClassType(name: string, superType: Type) -> ClassType {
		def token = Token.new("<internal>", name, 1, 1);
		var tref = if(superType != null, TypeUtil.typeRefOf(superType));
		def decl = VstClass.new(token, null, null, tref, null, null);
		def typecon = V3Class_TypeCon.new(decl, TypeCache.new());
		return ClassType.!(typecon.create0());
	}
	def newEnumType(name: string, count: int) -> ClassType {
		def token = Token.new("<internal>", name, 1, 1);
		def ident = VstIdent<void>.new(token, 0, null);
		var e = VstEnumDesugaring.new(ident, null);
		for (i < count) e.synthesizeEnumCase(ident, null);
		var decl = e.synthesizeClass(null);
		def typecon = V3Class_TypeCon.new(decl, TypeCache.new());
		return ClassType.!(typecon.create0());
	}
	def newVariantType(name: string, count: int) -> ClassType {
		def token = Token.new("<internal>", name, 1, 1);
		def ident = VstIdent<TypeParam>.new(token, 0, null);
		def kase = VstIdent<void>.new(token, 0, null);
		var e = VariantDesugaring.new(ident);
		for (i < count) e.synthesizeVariantCaseMember(kase, null, null);
		var decl = e.synthesizeTopLevelClass(null);
		def typecon = V3Class_TypeCon.new(decl, TypeCache.new());
		return ClassType.!(typecon.create0());
	}
}
// A helper which contains lots of helper functions to checking SSA instructions and blocks.
class SsaInstrMatchHelper(prog: Program, TEST: UnitTest, opt1: SsaInstr -> SsaInstr) {
	def assertIK(val: int, i: SsaInstr) {
		var j = opt1(i);
		if (!SsaConst.?(j)) failInstr(SsaConst.new(Int.TYPE, Int.box(val)), j);
		TEST.eq(val, Int.unbox(SsaConst.!(j).val));
	}
	def assertLK(val: long, i: SsaInstr) {
		var j = opt1(i);
		if (!SsaConst.?(j)) failInstr(SsaConst.new(Long.TYPE, Long.box(val)), j);
		TEST.eq(val, Long.unboxSU(SsaConst.!(j).val, val < 0));
	}
	def assertRK(vals: Array<Val>, i: SsaInstr) {
		var j = opt1(i);
		TEST.eq(true, SsaConst.?(j));
		var v = SsaConst.!(j);
		TEST.eq(true, Record.?(v.val));
		var r = Record.!(v.val);
		TEST.eq(vals.length, r.values.length);
		for (k < vals.length) {
			TEST.eq(true, Values.equal(vals[k], r.values[k]));
		}
	}
	def assertTK(vals: Array<Val>, i: SsaInstr) {
		var j = opt1(i);
		TEST.eq(true, SsaConst.?(j));
		TEST.eq(true, Values.equal(Tuple_Value.new(vals), SsaConst.!(j).val));
	}
	def assertBK(val: bool, i: SsaInstr) {
		TEST.eq(val, SsaConst.!(opt1(i)).unbox<bool>());
	}
	def assertId(i: SsaInstr, j: SsaInstr) {
		j = opt1(j);
		if (i != j) failInstr(i, j);
	}
	def assertEq(i: SsaInstr, j: SsaInstr) {
		j = opt1(j);
		assertShape(i, j);
	}
	def assertNo(i: SsaInstr) {
		assertId(i, opt1(i));
	}
	def assertFact(facts: Fact.set, i: SsaInstr) {
		var j = opt1(i);
		if (!j.checkFact(facts)) {
			System.error(TEST.name, "expected facts");
		}
	}
	def assertNotFact(facts: Fact.set, i: SsaInstr) {
		var j = opt1(i);
		if ((j.facts & facts) != Facts.NONE) {
			System.error(TEST.name, "expected not to have facts");
		}
	}
	def assertThrow(exception: string, i: SsaInstr) {
		var j = opt1(i);
		TEST.eq(true, SsaThrow.?(j));
		TEST.eq(exception, SsaThrow.!(j).exception);
	}
	def assertBlock(block: SsaBlock, expected: Array<SsaInstr>) {
		for (i < expected.length) {
			var prev = if(i == 0, block, expected[i - 1]);
			var next = if(i == expected.length - 1, block, expected[i + 1]);
			var x = expected[i];
			if (x != prev.next) return failBlock(block, expected);
			if (prev != x.prev) return failBlock(block, expected);
			if (x != next.prev) return failBlock(block, expected);
			if (next != x.next) return failBlock(block, expected);
		}
	}
	def assertBlockEq(block: SsaBlock, expected: Array<SsaInstr>) {
		var link = block.next;
		for (i < expected.length) {
			if (!checkShape(link, expected[i])) return failBlock(block, expected);
			link = link.next;
		}
	}
	def assertLink(i: SsaLink, j: SsaLink) {
		if (i != j) {
			var msg = if(j == null,
					Strings.format1("expected link @%1, got null", i.uid),
					Strings.format2("expected link @%1, got @%2", i.uid, j.uid));
			System.error(TEST.name, msg);
		}
	}
	def assertSuccs(b: SsaBlock, expected: Array<SsaBlock>) {
		var succ = b.succs();
		TEST.eq(expected.length, succ.length);
		for (i < expected.length) {  // TODO: better rendering of errors
			TEST.eq(expected[i], succ[i].dest);
		}
	}
	def assertPreds(expected: Array<SsaBlock>, b: SsaBlock) {
		TEST.eq(expected.length, b.preds.length);
		for (i < expected.length) {  // TODO: better rendering of errors
			var eb = expected[i], edge = b.preds[i];
			TEST.eq(eb, edge.src.block());
			TEST.eq(b, edge.dest);
			TEST.eq(i, edge.desti);
		}
	}
	def assertInputs(i: SsaInstr, expected: Array<SsaInstr>) {
		TEST.eq(expected.length, i.inputs.length);
		for (j < expected.length) {
			TEST.eq(expected[j], i.inputs[j].dest);
		}
	}
	def assertKilled(i: SsaInstr) {
		TEST.eq(true, i.facts.O_KILLED);
		TEST.eq(null, i.prev);
		TEST.eq(null, i.next);
		for (j < i.inputs.length) {
			TEST.eq(null, i.inputs[0].dest);
		}
	}
	def assertNoUse(i: SsaInstr, u: SsaInstr) {
		for (e: Edge<SsaInstr> = u.useList; e != null; e = e.next) {
			if (e.src == i) TEST.error1("@%1 should not be used", u.uid);
		}
	}
	def failBlock(block: SsaBlock, expected: Array<SsaInstr>) {
		printExpectedBlock(block, expected);
		printBlock(block, expected.length * 2 + 1);
		System.error(TEST.name, "");
	}
	def printExpectedBlock(block: SsaBlock, expected: Array<SsaInstr>) {
		var p = SsaPrinter.new();
		p.buf.format1("expected: %1 -> \n", block.uid);
		for (i < expected.length) {
			var prev = if(i == 0, block, expected[i - 1]);
			p.buf.format1("prev: %1 ", prev.uid);
			p.printInstr(expected[i]);
			p.buf.ln();
		}
		p.buf.format1("next: %1\n", block.uid);
		p.flush();
	}
	def printBlock(block: SsaBlock, max: int) {
		var p = SsaPrinter.new();
		p.buf.format1("chain: %1 -> \n", block.uid);
		var i = block.next;
		for (count < max) {
			if (i == null) {
				p.buf.puts(" ");
				p.putnull();
				p.ln();
				break;
			}
			if (i == block) break;
			p.buf.format1("prev: %1 ", if(i.prev == null, -1, i.prev.uid));
			p.printInstr(SsaInstr.!(i));
			i = i.next;
			p.buf.ln();
		}
		p.flush();
	}
	def assertShape(i: SsaInstr, j: SsaInstr) {
		if (!checkShape(i, j)) return failInstr(i, j);
	}

	def checkShape(i: SsaLink, j: SsaInstr) -> bool {
		if (i == j) return true;
		if (SsaConst.?(i) && SsaConst.?(j)) {
			var x = SsaConst.!(i), y = SsaConst.!(j);
			return Values.equal(x.val, y.val) && x.vtype == y.vtype;
		}
		if (SsaApplyOp.?(i) && SsaApplyOp.?(j)) {
			var x = SsaApplyOp.!(i), y = SsaApplyOp.!(j);
			if (!x.op.equals(y.op)) return false;
			if (x.inputs.length != y.inputs.length) return false;
			for (i < x.inputs.length) {
				var xx = x.inputs[i].dest, yy = y.inputs[i].dest;
				if (!checkShape(xx, yy)) return false;
			}
			return true;
		}
		return false;
	}
	def failInstr(i: SsaInstr, j: SsaInstr) {
		def prog = Program.new();
		var p = SsaPrinter.new();
		p.buf.puts("\nexpected: ");
		p.printInstr(i);
		p.buf.puts("\nresult:   ");
		p.printInstr(j);
		p.ln();
		p.flush();
		System.error(TEST.name, "instruction mismatch");
	}
}
