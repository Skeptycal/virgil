// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def MAX_VALUE_DIV_10 = 214748364;
def MAX_VALUE_MOD_10 = 7;
def MIN_VALUE_DIV_10 = -214748364;
def MIN_VALUE_MOD_10 = 8;
def ZERO_CHAR: u32 = '0';
// Utility methods for working with ints, including parsing and rendering,
// as well as the representation of the "int" type in the compiler
component Int {
	def MAX_WIDTH = 64;
	private def cache = Array<IntType>.new(2 * MAX_WIDTH + 1);
	def TYPE      = getType(true, 32);
	def TYPE_ARRAY: Array<Type> = [TYPE];
	def ONE       = Box.new(1);
	def TWO       = Box.new(2);
	def FOUR      = Box.new(4);
	def MINUS_1   = Box.new(-1);
	def MAX_VALUE = 2147483647;
	def MIN_VALUE = -2147483648;

	def getType(signed: bool, width: int) -> IntType {
		if (width <= 0 || width > MAX_WIDTH) return null;
		var index = if (signed, width, width + MAX_WIDTH);
		var t = cache[index];
		if (t == null) t = cache[index] = IntType.!(Int_TypeCon.new(byte.!(width), signed).singleton);
		return t;
	}
	def getTypeCon(signed: bool, width: int) -> Int_TypeCon {
		var t = getType(signed, width);
		return if(t != null, Int_TypeCon.!(t.typeCon));
	}
	def lookupFsi(name: string, signed: bool) -> Int_TypeCon {
		if (name.length < 2 || name.length > 3) return null;
		var width = name[1] - int.!('0');
		if (width < 1 || width > 9) return null;
		if (name.length == 3) {
			var low = name[2] - int.!('0');
			if (low < 0 || low > 9) return null;
			width = width * 10 + low;
		}
		return getTypeCon(signed, width);
	}
	def unbox(val: Val) -> int {
		if (val == null) return 0;
		return Box<int>.!(val).val;
	}
	def box(val: int) -> Box<int> {
		return Box.new(val);
	}
	def newMap<V>() -> HashMap<int, V> {
		return HashMap<int, V>.new(int.!<int>, int.==);
	}
	def parseDecimal(a: Array<byte>) -> Box<int> {
		if (a.length == 0) return null;
		var ch = a[0], r: Parsed<int>;
		if (ch == '-') r = parseNegDecimal(a, 0);
		else if (ch < '0' || ch > '9') return null;
		else r = parsePosDecimal(a, 0);
		if (r.passed && r.length == a.length) return box(r.val);
		return null;
	}
	// note: assumes pos < a.length
	def parsePosDecimal(a: Array<byte>, pos: int) -> Parsed<int> {
		var v0 = a[pos], passed = true;
		if (v0 == '0') {
			var p1 = pos + 1;
			if (p1 == a.length || a[p1] - ZERO_CHAR > 9) return Parsed.new(true, 1, 0);
			passed = false;
		}
		var accum = v0 - ZERO_CHAR;
		if (accum > 9) return error(0);
		var max = a.length, i = pos + 1;
		while (i < max) {
			var d = a[i] - ZERO_CHAR;
			if (d > 9) break;
			if (accum >= MAX_VALUE_DIV_10) {  // check for overflow
				if (accum > MAX_VALUE_DIV_10) passed = false;
				else if (d > MAX_VALUE_MOD_10) passed = false;
			}
			accum = accum * 10 + d;
			i++;
		}
		return Parsed.new(passed, i - pos, int.!(accum));
	}
	// note: assumes a(pos) == '-'
	def parseNegDecimal(a: Array<byte>, pos: int) -> Parsed<int> {
		var p1 = pos + 1, max = a.length;
		if (p1 >= max) return error(1);
		var passed = true, v1 = a[p1];
		if (v1 < '1' || v1 > '9') passed = false;

		var accum = int.!('0') - v1, i = pos + 2;
		while (i < max) {
			var d = a[i] - ZERO_CHAR;
			if (d > 9) break;
			if (accum <= MIN_VALUE_DIV_10) {  // check for overflow
				if (accum < MIN_VALUE_DIV_10) passed = false;
				else if (d > MIN_VALUE_MOD_10) passed = false;
			}
			accum = accum * 10 - int.!(d);
			i++;
		}
		return Parsed.new(passed, i - pos, accum);
	}
	private def error(len: int) -> Parsed<int> {
		return Parsed.new(false, len, 0);
	}
	def min(a: int, b: int) -> int {
		return if(a < b, a, b);
	}
	// convert a width and a signed-ness into the name of the integer type
	def name(width: byte, signed: bool) -> string {
		if (width == 16 && signed) return "short";
		if (width == 32 && signed) return "int";
		if (width == 64 && signed) return "long";
		if (width == 8 && !signed) return "byte";
		if (width < 10) return [if(signed, 'i', 'u'), byte.!('0' + width)];
		return [if(signed, 'i', 'u'), byte.!('0' + (width / 10)), byte.!('0' + (width % 10))];
	}
}
// Utility methods for working with longs.
component Long {
	def TYPE = Int.getType(true, 64);
	def unboxSU(val: Val, signed: bool) -> long {
		if (val == null) return 0;
		if (Box<long>.?(val)) return Box<long>.!(val).val;
		if (Box<int>.?(val)) {
			var v = Box<int>.!(val).val;
			return if(signed, v, u32.!(v));
		}
		System.error("UnboxError", "expected integer box");
		return 0L;
	}
	def split(val: long) -> (int, int) {
		return (int.!(val >> 32), int.!(val));
	}
	def box(val: long) -> Box<long> {
		return if(val != 0, Box.new(val));
	}
}
// Type constructor for integral types, including a width and a signed-ness attribute.
class Int_TypeCon extends Member_TypeCon {
	new(width: byte, signed: bool) super(Int.name(width, signed), V3Kind.INT, 0, TypeUtil.globalCache) {
		singleton = IntType.new(width, signed, this);
	}
	def lookupMember(t: Type, name: string, receiver: bool) -> LookupResult {
		return IntType.!(singleton).lookupMember(t, name, receiver);
	}
	def lookupInfix(infix: byte, rtype: Type) -> Operator {
		return IntType.!(singleton).lookupInfix(infix, rtype);
	}
}
class IntType extends Type {
	def width: byte;  // width in bits (1-64)
	def signed: bool; // true if signed, false if unsigned
	var cache: Array<Operator>; // cache of operators
	var unopTypes: Array<Type>;
	var binopTypes: Array<Type>;
	var ishift: u5;
	var lshift: u6;
	var max: Val;
	var min: Val;

	new(width, signed, typeCon: Int_TypeCon) super(if(signed, width, 65 + width), typeCon, null) {
		if (width <= 32) {
			min = if(signed, box(-1 << (width - byte.!(1))));
			max = box(-1 ^ (0xFFFFFFFF << (width - if(signed, byte.!(1)))));
			ishift = u5.!(32 - width);
		} else {
			min = if(signed, boxL(-1L << (width - byte.!(1))));
			max = boxL(-1L ^ (0xFFFFFFFFFFFFFFFFL << (width - if(signed, byte.!(1)))));
			lshift = u6.!(64 - width);
		}
	}
	def box(v: int) -> Val {
		if (v == 0) return null;
		if (width > 32) return Box<long>.new(v);
		return Box.new(v);
	}
	def boxL(v: long) -> Val {
		if (v == 0) return null;
		return Box.new(v);
	}
	def byteSize() -> int {
		if (width <= 8) return 1;
		if (width <= 16) return 2;
		if (width <= 32) return 4;
		return 8;
	}
	def lookupMember(t: Type, name: string, receiver: bool) -> LookupResult {
		if (receiver) return LookupResult.None;
		if (Strings.equal(name, "min")) return LookupResult.Const(this, min);
		if (Strings.equal(name, "max")) return LookupResult.Const(this, max);
		if (Strings.equal(name, "~")) {
			if (cache == null || cache[V3Infix.NumOps] == null) {
				setCache(byte.!(V3Infix.NumOps), V3Op.newVstSugar(VstOperator.IntBitwiseNeg, [this], [this], this));
			}
			return LookupResult.Inst(cache[V3Infix.NumOps], null);
		}
		return LookupResult.None;
	}
	def lookupInfix0(infix: byte) -> Operator {
		return lookupInfix(infix, this);
	}
	def lookupInfix(infix: byte, rtype: Type) -> Operator {
		if (rtype == this && cache != null) {
			var op = cache[infix];
			if (op != null) return op;
		}
		match (infix) {
			V3Infix.Equal =>    return lookupCompare(infix, rtype, Opcode.IntEq, VstOperator.IntMixedEqual);
			V3Infix.NotEqual => return lookupCompare(infix, rtype, Opcode.VstSugar, VstOperator.IntMixedNotEqual);
			V3Infix.Add =>  return lookupArith(infix, rtype, Opcode.IntAdd);
			V3Infix.Sub =>  return lookupArith(infix, rtype, Opcode.IntSub);
			V3Infix.Mul =>  return lookupArith(infix, rtype, Opcode.IntMul);
			V3Infix.Div =>  return lookupArith(infix, rtype, Opcode.IntDiv);
			V3Infix.Mod =>  return lookupArith(infix, rtype, Opcode.IntMod);
			V3Infix.And =>  return lookupArith(infix, rtype, Opcode.IntAnd);
			V3Infix.Or =>   return lookupArith(infix, rtype, Opcode.IntOr);
			V3Infix.Xor =>  return lookupArith(infix, rtype, Opcode.IntXor);
			V3Infix.Lt =>   return lookupCompare(infix, rtype, Opcode.IntLt, VstOperator.IntMixedLt);
			V3Infix.Gt =>   return lookupCompare(infix, rtype, Opcode.VstSugar, VstOperator.IntGt);
			V3Infix.Lteq => return lookupCompare(infix, rtype, Opcode.IntLteq, VstOperator.IntMixedLteq);
			V3Infix.Gteq => return lookupCompare(infix, rtype, Opcode.VstSugar, VstOperator.IntGteq);
			V3Infix.Shl => return lookupShift(infix, Opcode.IntShl);
			V3Infix.Sar => return lookupShift(infix, if(signed, Opcode.IntSar, Opcode.IntShr));
			V3Infix.Shr => return lookupShift(infix, Opcode.IntShr);
		}
		return null;
	}
	def widerOfThisAnd(t: Type) -> IntType {
		var wtype = wider(t);
		return if(wtype == null, this, wtype);
	}
	def unsigned() -> IntType {
		return if(signed, Int.getType(false, width), this);
	}
	def wider(rtype: Type) -> IntType {
		if (rtype == this) return this;
		if (IntType.?(rtype)) {
			var that = IntType.!(rtype);
			if (this.width < that.width) {
				if (this.signed == that.signed) return that;
				if (this.signed) return null;
				return that;
			}
			if (that.width < this.width) { 
				if (this.signed == that.signed) return this;
				if (that.signed) return null;
				return this;
			}
		}
		return null;
	}
	private def lookupArith(infix: byte, rtype: Type, opcode: Opcode) -> Operator {
		var t = widerOfThisAnd(rtype);
		return t.getCached(infix, opcode, t, VstOperator.TypeCast);
	}
	private def lookupShift(infix: byte, opcode: Opcode) -> Operator {
		if (cache != null && cache[infix] != null) return cache[infix];
		if (unopTypes == null) unopTypes = [this];
		var rtype: Type = Byte.TYPE, binopTypes = [this, rtype], resultType = this;
		var sig = Function.siga(binopTypes, resultType);
		return setCache(infix, OperatorOf.new(opcode, unopTypes, sig, (), V3Op.intrinsic_error));
	}
	private def lookupCompare(infix: byte, rtype: Type, opcode: Opcode, vst: VstOperator) -> Operator {
		var wtype = wider(rtype);
		if (wtype == null) {
			if (IntType.?(rtype)) {
				// Mixed sign comparison. Don't cache.
				return V3Op.newVstSugar(vst, [this, rtype], [this, rtype], Bool.TYPE);
			}
			wtype = this;
		}
		return wtype.getCached(infix, opcode, Bool.TYPE, vst);
	}
	def getCached(infix: byte, opcode: Opcode, resultType: Type, vst: VstOperator) -> Operator {
		if (infix == V3Infix.Equal) return setCache(infix, V3Op.newEqual(this));
		if (unopTypes == null) unopTypes = [this];
		if (binopTypes == null) binopTypes = [this, this];
		if (opcode == Opcode.VstSugar) {
			return setCache(infix, V3Op.newVstSugar(vst, unopTypes, binopTypes, Bool.TYPE));
		}
		return setCache(infix, OperatorOf.new(opcode, unopTypes, Function.siga(binopTypes, resultType), (), V3Op.intrinsic_error));
	}
	def setCache(infix: byte, op: Operator) -> Operator {
		if (cache == null) cache = Array.new(V3Infix.NumOps + 1);
		return cache[infix] = op;
	}
	def isU32() -> bool {
		return width == 32 && !signed;
	}
	def isU64() -> bool {
		return width == 64 && !signed;
	}
	def trunc_32(v: int) -> int {
		return if(signed, (v << ishift) >> ishift, (v << ishift) >>> ishift);
	}
	def trunc_u32(v: int) -> int {
		return (v << ishift) >>> ishift;
	}
	def trunc_64(v: long) -> long {
		return if(signed, (v << lshift) >> lshift, (v << lshift) >>> lshift);
	}
	def trunc_u64(v: long) -> long {
		return (v << lshift) >>> lshift;
	}
	def extendsTo(tt: IntType) -> bool {
		var ft = this;
		if (tt == ft) return true;		// identity
		if (tt.width <= ft.width) return false;	// truncation
		if (tt.signed) return true;		// destination is already signed
		return tt.signed == ft.signed;		// signs must match
	}
	def extendsToLong(tt: IntType) -> bool {
		var ft = this;
		return ft.width <= 32 && tt.width > 32;
	}
	def truncatesToInt(tt: IntType) -> bool {
		var ft = this;
		return ft.width > 32 && tt.width <= 32;
	}
}
// All functionality relating to integer operations.
component IntOp {
	// computes the log of a power of two integer {v}
	def log(v: int) -> int {
		var r = -1;
		while (v != 0) { // XXX: faster integer logarithm?
			v = v >>> 1;
			r++;
		}
		return r;
	}
	def logl(v: long) -> int {
		var r = -1;
		while (v != 0) { // XXX: faster integer logarithm?
			v = v >>> 1;
			r++;
		}
		return r;
	}
	def evalConversion(t1: Type, t2: Type, val: Val) -> TypeCast {
		if (t1 == t2) return TypeSystem.TRUE;
		var i1 = IntType.!(t1), i2 = IntType.!(t2);
		if (!i1.extendsToLong(i2) && i1.extendsTo(i2)) return TypeSystem.TRUE;
		return TypeCast.new(CastOp.VALUE, evalTruncate(i2, i1.signed, val));
	}
	def evalTruncate(t: IntType, signed: bool, val: Val) -> Val {
		if (val == null) return val;
		if (t.width <= 32) {
			if (Box<int>.?(val)) {
				var v = Box<int>.!(val).val, r = t.trunc_32(v);
				return if(r == v, val, Box.new(r));
			} else {
				var v = int.!(Box<long>.!(val).val), r = t.trunc_32(v);
				return Box.new(r);
			}
		}
		return Box.new(t.trunc_64(Long.unboxSU(val, signed)));
	}
}
/*
class IntOpCache(it: IntType) {
	def typeArgs: Array<Type> = [it];
	def tupleType = Tuple.newType(Lists.cons2(it, it));
	def binopSig = Function.sig(tupleType, it);
	def cmpSig = Function.sig(tupleType, Bool.TYPE);
	def cache = Array<Operator>.new(V3Infix.NumOps + 1);

	def lookupInfix(infix: byte, rtype: Type) -> Operator {
		if (rtype == it) {
			var op = cache[infix];
			if (op != null) return op;
		}
		match (infix) {
			V3Infix.Equal =>    return lookupCompare(infix, rtype, Opcode.IntEq, VstOperator.IntMixedEqual);
			V3Infix.NotEqual => return lookupCompare(infix, rtype, Opcode.VstSugar, VstOperator.IntMixedNotEqual);
			V3Infix.Add =>  return lookupArith(infix, rtype, Opcode.IntAdd);
			V3Infix.Sub =>  return lookupArith(infix, rtype, Opcode.IntSub);
			V3Infix.Mul =>  return lookupArith(infix, rtype, Opcode.IntMul);
			V3Infix.Div =>  return lookupArith(infix, rtype, Opcode.IntDiv);
			V3Infix.Mod =>  return lookupArith(infix, rtype, Opcode.IntMod);
			V3Infix.And =>  return lookupArith(infix, rtype, Opcode.IntAnd);
			V3Infix.Or =>   return lookupArith(infix, rtype, Opcode.IntOr);
			V3Infix.Xor =>  return lookupArith(infix, rtype, Opcode.IntXor);
			V3Infix.Lt =>   return lookupCompare(infix, rtype, Opcode.IntLt, VstOperator.IntMixedLt);
			V3Infix.Gt =>   return lookupCompare(infix, rtype, Opcode.VstSugar, VstOperator.IntGt);
			V3Infix.Lteq => return lookupCompare(infix, rtype, Opcode.IntLteq, VstOperator.IntMixedLteq);
			V3Infix.Gteq => return lookupCompare(infix, rtype, Opcode.VstSugar, VstOperator.IntGteq);
			V3Infix.Shl => return lookupShift(infix, Opcode.IntShl);
			V3Infix.Sar => return lookupShift(infix, if(it.signed, Opcode.IntSar, Opcode.IntShr));
			V3Infix.Shr => return lookupShift(infix, Opcode.IntShr);
		}
		return null;
	}
	private def lookupArith(infix: byte, rtype: Type, opcode: Opcode) -> Operator {
		var c: IntOpCache = it.widerOfThisAnd(rtype).cache();
		var op = c.cache[infix];
		if (op == null) c.cache[infix] = OperatorOf.new(opcode, c.typeArgs, c.binopSig, (), V3Op.intrinsic_error);
		return op;
	}
	private def lookupShift(infix: byte, opcode: Opcode) -> Operator {
		var c = this;
		var op = c.cache[infix];
		if (op == null) c.cache[infix] = OperatorOf.new(opcode, c.typeArgs, Function.siga([it, Byte.TYPE], it), (), V3Op.intrinsic_error);
		return op;
	}
	private def lookupCompare(infix: byte, rtype: Type, opcode: Opcode, vst: VstOperator) -> Operator {
		var c = this;
		if (rtype == c.it) {
			var op = c.cache[infix];
			if (op == null) c.cache[infix] = OperatorOf.new(opcode, c.typeArgs, c.cmpSig, (), V3Op.intrinsic_error);
			return op;
		}
		var wt = it.wider(rtype);
		if (wt != null) {
			c = wt.cache();
			var op = c.cache[infix];
			if (op == null) c.cache[infix] = OperatorOf.new(opcode, c.typeArgs, c.cmpSig, (), V3Op.intrinsic_error);
			return op;
		}
		if (IntType.?(rtype)) {
			// Mixed sign comparison. Don't cache.
			return V3Op.newVstSugar(vst, [it, rtype], [it, rtype], Bool.TYPE);
		}
		return null; // no such comparison
	}
}
*/