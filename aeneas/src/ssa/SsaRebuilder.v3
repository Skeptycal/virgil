// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Shared functionality for building new SSA code from old SSA code, e.g.
// during normalization or lowering.
class SsaRebuilder(context: SsaContext) {
	def instrMap: SsaMap = SsaMap.new();
	var newGraph: SsaGraph;
	var multiMap: PartialMap<SsaInstr, Array<SsaInstr>>;
	var blockStartMap: PartialMap<SsaBlock, SsaBlock>;
	var blockEndMap: PartialMap<SsaBlock, SsaBlock>;
	var curBlock: SsaBuilder;
	var edgeMapMap: PartialMap<SsaBlock, Array<int>>;

	// Stack for processing phis and blocks. Order doesn't really matter as long as a block's
	// dominators are processed before the block. Using a queue yields breadth-first order.
	var phiQueue: Vector<SsaPhi>;
	var blockQueue: Vector<(SsaBlock, SsaBlock)>;

	def genGraph() -> SsaGraph {
		if (newGraph != null) return newGraph;
		var rt = context.graph.returnType;
		var tn = normType(rt);
		if (tn != null) rt = tn.newType;
		newGraph = SsaGraph.new(genParams(), rt);
		var oldStart = context.graph.startBlock;
		if (oldStart.succs().length == 0) {
			// common case of a single block that ends in return or throw
			// no need for blockmaps, queueing, or phi handling
			genBlock(oldStart, newGraph.startBlock);
		} else {
			// a method with multiple blocks
			genMultiBlock(oldStart, newGraph.startBlock);
		}
		instrMap.clear();
		return newGraph;
	}
	def genMultiBlock(oldStart: SsaBlock, newStart: SsaBlock) {
		blockStartMap = Ssa.newBlockMap();
		blockStartMap[oldStart] = newStart;
		blockEndMap = Ssa.newBlockMap();
		blockEndMap[oldStart] = newStart;
		phiQueue = Vector.new();
		blockQueue = Vector.new();
		blockQueue.add(oldStart, newStart);
		for (i < blockQueue.length) genBlock(blockQueue.array[i]);
		for (i < phiQueue.length) finishPhi(phiQueue.array[i]);
	}
	def genParams() -> Array<SsaParam> {
		// translate parameters and allocate new graph
		var params = Vector<SsaParam>.new().grow(context.graph.params.length);
		for (p in context.graph.params) genParam(p, params);
		return params.extract();
	}
	private def genBlock(ob: SsaBlock, nb: SsaBlock) {
		context.block = ob;
		this.curBlock = SsaBuilder.new(context, newGraph, nb);
		for (i = ob.next; i != ob && !curBlock.end; i = i.next) {
			// translate each instruction in the block
			if (SsaApplyOp.?(i)) genApplyOp(SsaApplyOp.!(i));
			else if (SsaPhi.?(i)) ;  // XXX: processing of phis necessary?
			else if (SsaReturn.?(i)) genReturn(SsaReturn.!(i));
			else if (SsaIf.?(i)) genIf(ob, SsaIf.!(i));
			else if (SsaGoto.?(i)) genGoto(SsaGoto.!(i));
			else if (SsaSwitch.?(i)) genSwitch(ob, SsaSwitch.!(i));
			else if (SsaThrow.?(i)) genThrow(SsaThrow.!(i));
			else return context.fail1("unexpected block end @%1", i.uid);
		}
	}
	private def finishPhi(oi: SsaPhi) {
		// XXX: if only one predecessor, replace phi with its (one) input
		var ob = oi.block, nb = mapBlockStart(ob);
//		Terminal.put3("old #%1 -> new #%2 |%3|\n", ob.uid, nb.uid, nb.preds.length);
		var edgeMap = getEdgeMap(oi, ob, nb);
		var ni = SsaPhi.!(instrMap[oi]);
		if (ni != null) {
			// phi was mapped one-to-one; map the new inputs
			var newInputs = Array<SsaInstr>.new(nb.preds.length);
			var facts = Facts.NONE;
			for (j < newInputs.length) {
//				Terminal.put3("@%1[%2] -> ni[%3]\n", oi.uid, edgeMap(j), j);
				var nii = genRef1(oi.inputs[edgeMap[j]]);
				newInputs[j] = nii;
				if (j == 0) facts = nii.facts;
				else facts = facts & nii.facts;
			}
			ni.setInputs(newInputs);
			ni.setFact(facts);
			nb.prepend(ni);
			return;
		}
		// phi mapped to multiple phis
		var mi = multiMap[oi];
		for (w < mi.length) {
			var wi = SsaPhi.!(mi[w]);
			var newInputs = Array<SsaInstr>.new(nb.preds.length);
			for (j < newInputs.length) {
				// XXX: interchange these loops for better performance
				var oii = oi.inputs[edgeMap[j]];
				newInputs[j] = genRefs([oii])[w];
			}
			wi.setInputs(newInputs);
			nb.prepend(wi);
		}
	}
	private def getEdgeMap(oi: SsaPhi, ob: SsaBlock, nb: SsaBlock) -> Array<int> {
		if (nb.hasPhis()) return edgeMapMap[nb];
		// Compute the predecessors to the new block and split critical edges.
		var newPreds = Array<SsaBlock>.new(nb.preds.length);
		var preds = nb.preds;
		for (i < preds.length) {
			var inEdge = preds[i], pred = inEdge.src;
			newPreds[i] = pred.block();
			if (pred.block().succs().length > 1) {
				// split critical edge between src & dest
				var newBlock = SsaBlock.new();
				newBlock.preds = [inEdge];
				inEdge.dest = newBlock;
				inEdge.desti = i;
				var goto = SsaGoto.new(null);
				goto.succs[0].connectI(nb, i);
				newBlock.append(goto);
			}
		}
		// map new input edges [e0, e1, e2] to old phi input indexes [i0, i2, iX]
		var oldEdges = ob.preds;
		var map = Array<int>.new(newPreds.length);
		for (i < oldEdges.length) {
			if (oldEdges[i] == null || oldEdges[i].src == null) context.fail("null input edge");
			if (oldEdges[i] == null) context.fail("is null");
			var newPred = mapBlockEnd(oldEdges[i].src.block());
			for (j < newPreds.length) {
				if (newPred == newPreds[j]) map[j] = i;
			}
		}
		if (edgeMapMap == null) edgeMapMap = Ssa.newBlockMap();
		edgeMapMap[nb] = map;
		return map;
	}
	def genParam(oldParam: SsaParam, params: Vector<SsaParam>) {
		var tn = normType(oldParam.vtype);
		if (tn == null) {
			var np = SsaParam.new(params.length, oldParam.vtype);
			params.add(np);
			return map1(oldParam, np);
		}
		if (params.length == 0 || tn.size == 1) {
			var np = SsaParam.new(params.length, tn.newType);
			params.add(np);
			if (tn.size == 1) map1(oldParam, np);
			else map0(oldParam);
			return;
		}
		// one-zero or one-many mapping
		var newParams = Array<SsaInstr>.new(tn.size);
		for (j < newParams.length) {
			var np = SsaParam.new(params.length, tn.sub[j]);
			newParams[j] = np;
			params.add(np);
		}
		mapN(oldParam, newParams);
	}
	def genApplyOp(oi: SsaApplyOp);

	def genIf(ob: SsaBlock, oi: SsaIf) {
		var key = genRef1(oi.inputs[0]), succ = ob.succs();
		if (SsaConst.?(key)) {
			// fold the branch
			var succ = mapEdge(succ[if(key.unbox<bool>(), 0, 1)]);
			return curBlock.addGoto(succ);
		}
		curBlock.addIf(key, mapEdge(succ[0]), mapEdge(succ[1]));
	}
	def genSwitch(ob: SsaBlock, oi: SsaSwitch) {
		if (curBlock.end) return;
		var key = genRef1(oi.inputs[0]);
		if (SsaConst.?(key)) {
			// fold the switch
			var succ = mapEdge(oi.findSucc(SsaConst.!(key).val));
			return curBlock.addGoto(succ);
		}
		curBlock.end = true;
		var sw = SsaSwitch.new(oi.keyType, oi.minValue, oi.maxValue, key);
		curBlock.block.append(sw);
		var osuccs = ob.succs();
		var succ = Array<SsaCfEdge>.new(osuccs.length);
		for (i < succ.length) {
			succ[i] = SsaCfEdge.new(sw, i, mapEdge(osuccs[i]));
		}
		sw.succs = succ;
	}
	def genReturn(oi: SsaReturn) {
		curBlock.addReturn(genRefs(oi.inputs));
	}
	def genThrow(oi: SsaThrow) {
		curBlock.addThrow(oi.source, oi.exception);
	}
	def genGoto(oi: SsaGoto) {
		var ot = oi.target(), nt = mapBlockStart(ot);
		curBlock.addGoto(nt);
	}

	def mapBlockStart(ob: SsaBlock) -> SsaBlock {
		var nb = blockStartMap[ob];
		if (nb == null) {
			nb = SsaBlock.new();
			blockStartMap[ob] = nb;
			blockEndMap[ob] = nb;
			blockQueue.add(ob, nb);
		}
		return nb;
	}
	def mapBlockEnd(ob: SsaBlock) -> SsaBlock {
		return blockEndMap[ob];
	}
	def map0(oi: SsaInstr) {
		mapN(oi, Ssa.NO_INSTRS);
	}
	def map1(oi: SsaInstr, ni: SsaInstr) {
		if (SsaPhi.?(oi) && SsaPhi.?(ni)) phiQueue.add(SsaPhi.!(oi));
		instrMap[oi] = ni;
		ni.facts = ni.facts | oi.facts;
	}
	def mapN(oi: SsaInstr, na: Array<SsaInstr>) {
		if (na.length == 1) return map1(oi, na[0]);
		if (SsaPhi.?(oi)) phiQueue.add(SsaPhi.!(oi));
		if (multiMap == null) multiMap = Ssa.newMap();
		multiMap[oi] = na;
	}
	def genRefs(a: Array<SsaDfEdge>) -> Array<SsaInstr> {
		var vec = Vector<SsaInstr>.new().grow(a.length);
		for (i < a.length) {
			var e = a[i], oi = e.dest, ni = instrMap[oi];
			if (ni != null) {
				// instruction was already translated
				vec.add(ni);
				continue;
			}
			if (multiMap != null) {
				// could be multiple instructions
				var nm = multiMap[oi];
				if (nm != null) {
					vec.addN(nm);
					continue;
				}
			}
			if (SsaConst.?(oi)) {
				// translate and add a use of a value.
				genVal(e, i, SsaConst.!(oi), vec);
			} else if (SsaPhi.?(oi)) {
				// translate and add a use of a phi.
				var phi = genPhi(SsaPhi.!(oi));
				if (phi != null) vec.add(phi);
				else vec.addN(multiMap[oi]);
			} else {
				unexpectedInstr(oi);
			}
		}
		return vec.extract();
	}
	def genRef1(e: SsaDfEdge) -> SsaInstr {
		var oi = e.dest, ni = instrMap[oi];
		if (ni != null) return ni;
		if (SsaConst.?(oi)) return genVal1(e, -1, SsaConst.!(oi));
		if (SsaPhi.?(oi)) return genPhi1(SsaPhi.!(oi));
		return unexpectedInstr(oi);
	}
	def genVal1(e: SsaDfEdge, index: int, oi: SsaConst) -> SsaInstr {
		var tn = normType(oi.vtype), val: SsaConst;
		if (tn == null) {
			// No normalization.
			var val = newGraph.valConst(oi.vtype, genSimpleVal(oi.val));
			map1(oi, val);
			return val;
		}
		if (tn.size != 1) context.fail1("expected 1-1 val mapping for: #%1", oi.uid);
		if (tn.sub == null) {
			// Simple 1-1 normalization.
			var val = newGraph.valConst(tn.newType, genSimpleVal(oi.val));
			map1(oi, val);
			return val;
		}
		// Complex normalization with a single output value.
		var vec = Vector<SsaInstr>.new().grow(1);
		genValN(e, index, oi, tn, vec);
		return vec[0];
	}
	def genPhi1(oi: SsaPhi) -> SsaInstr {
		var phi = genPhi(oi);
		if (phi == null) context.fail1("expected 1-1 phi mapping for: #%1", oi.uid);
		return phi;
	}
	def genVal(e: SsaDfEdge, index: int, oi: SsaConst, vec: Vector<SsaInstr>) {
		var tn = normType(oi.vtype);
		if (tn == null) {
			// No normalization.
			var val = newGraph.valConst(oi.vtype, genSimpleVal(oi.val));
			map1(oi, val);
			return vec.add(val);
		}
		if (tn.sub == null) {
			// 1-1 normalization.
			var val = newGraph.valConst(tn.newType, genSimpleVal(oi.val));
			map1(oi, val);
			return vec.add(val);
		}
		if (tn.size == 0) {
			// 1-0 normalization.
			map0(oi);
			return;
		}
		// 1-N normalization.
		genValN(e, index, oi, tn, vec);
	}
	def genSimpleVal(v: Val) -> Val {
		return v;
	}
	def genValN(e: SsaDfEdge, index: int, oi: SsaConst, tn: TypeNorm, vec: Vector<SsaInstr>);
	def mapEdge(edge: SsaCfEdge) -> SsaBlock {
		return mapBlockStart(edge.dest);
	}
	def opBoolAnd(x: SsaInstr, y: SsaInstr) -> SsaInstr {
		return curBlock.opBoolAnd(V3Op.opBoolAnd, x, y);
	}
	def unexpectedInstr(oi: SsaInstr) -> SsaInstr {
		Terminal.put("Unexpected SSA instruction: ");
		var printer = SsaPrinter.new();
		printer.printInstr(oi);
		Terminal.putb(printer.buf);
		context.fail("unexpected instruction");
		return oi;
	}
	def genPhi(oldPhi: SsaPhi) -> SsaPhi {
		var tn = normType(oldPhi.vtype);
		var newBlock = mapBlockStart(oldPhi.block);
		if (tn == null) {    // no normalization
			var phi = SsaPhi.new(oldPhi.vtype, newBlock, Ssa.NO_INSTRS);
			map1(oldPhi, phi);
			return phi;
		}
		if (tn.size == 0) {  // degenerate zero-width phi
			map0(oldPhi);
			return null;
		}
		if (tn.size == 1) {  // normal case
			var phi = SsaPhi.new(tn.newType, newBlock, Ssa.NO_INSTRS);
			map1(oldPhi, phi);
			return phi;
		}
		// complex case.
		var phis = Array<SsaInstr>.new(tn.size);
		for (i < phis.length) {
			phis[i] = SsaPhi.new(tn.sub[i], newBlock, Ssa.NO_INSTRS);
		}
		mapN(oldPhi, phis);
		return null;
	}
	def typeFromEdge(e: SsaDfEdge, index: int) -> Type {
		var s = e.src;
		if (SsaPhi.?(s)) return SsaPhi.!(s).vtype;
		if (SsaApplyOp.?(s)) {
			var op = SsaApplyOp.!(s).op;
			if (index < 0) {
				for (i < op.sig.paramTypes.length) {
					if (s.inputs[i] == e) return op.sig.paramTypes[i];
				}
			}
			return op.sig.paramTypes[index];
		}
		if (SsaReturn.?(s)) {
			// TODO: graphs should have multiple return values.
			var t = context.graph.returnType;
			if (V3.isTuple(t)) t = Lists.get(t.nested, index);
			return t;
		}
		unexpectedInstr(s);
		return Void.TYPE;
	}
	def normType(t: Type) -> TypeNorm;
	def mapNorm(oi: SsaInstr, ni: SsaInstr, tn: TypeNorm) {
		if (tn == null || tn.size == 1) return map1(oi, ni);
		if (tn.size == 0) return map0(oi);
		curBlock.at(null);
		var values = Array<SsaInstr>.new(tn.size);
		for (i < tn.size) values[i] = curBlock.opTupleGetElem(tn.newType, i, ni);
		mapN(oi, values);
	}
	def genEqualN(oi: SsaApplyOp, tn: TypeNorm) -> SsaInstr {
		var expr: SsaInstr, newArgs = genRefs(oi.inputs);
		var join = opBoolAnd;
		for (i < tn.size) {
			var cmp: SsaInstr, a = newArgs[i], b = newArgs[i + tn.size];
			cmp = curBlock.opEqual(tn.sub[i], a, b);
			if (expr == null) expr = cmp;
			else expr = join(expr, cmp);
		}
		map1(oi, expr);
		return expr;
	}
}
class TypeNorm(oldType: Type, newType: Type, sub: Array<Type>) {
	var raFacts: RaFact.set;
	def size = if(sub == null, 1, sub.length);
	def addTo(vec: Vector<Type>) {
		if (sub == null) vec.add(newType);
		else if (sub.length > 0) vec.addN(sub);
	}
}
