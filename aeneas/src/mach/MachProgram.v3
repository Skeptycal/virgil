// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Manages the mapping between V3-level program entities (classes, objects, functions) 
// and machine-level entities (addresses and tables) and provides logic to encode
// values into byte arrays for producing binaries.
class MachProgram(prog: Program, code: AddressSpace, data: AddressSpace, intNorm: IntNormalizer) {
	def typeReps = TypeUtil.newTypeMap<MachRep>();
	def tagType = Int.TYPE;
	def refSize = data.addressSize;

	var runtime: MachRuntime;
	def codeRegion    = Region.new("code", code);
	def metaRegion    = Region.new("meta", code);
	def dataRegion    = Region.new("data", data);
	def mtableMap     = IrUtil.newIrItemMap<Addr>();
	def methodMap     = IrUtil.newIrItemMap<Address<IrMethod>>();
	def fieldMap      = IrUtil.newIrItemMap<Address<IrField>>();
	def recordMap     = V3.newRecordMap<Address<Record>>();
	var recordQueue   = Vector<Record>.new();
	var stubMap       = Strings.newMap<(Addr, (Addr, MachDataBuffer) -> void)>();
	var allocates = false;
	var stackAlign: int;
	var numMethods: int;

	new() {
		stackAlign = data.alignment;
	}
	def build(compiler: Compiler, config: SsaMachGenConfig) {
        	processGlobals(prog.ir.globals);
		prog.ir.classes.apply(processIrClass);
		var methods = prog.ir.methods;
		var machGen = SsaMachGen.new(this, compiler, config);
		for (i < methods.length) {
			machGen.doMethod(methods[i]);
		}
		numMethods = methods.length;
	}
	def computeFieldOffsets(p: Program, b: Vector<IrField>, start: int) {
		var layout = MachLayout.new(this);
		if (start == 0) { // add type tag as first field
			layout.addType(tagType);
		} else { // skip to end of previous fields
			var last = b[start - 1];
			layout.size = last.machOffset + sizeOf(last.fieldType);
		}
		for (i = start; i < b.length; i++) {
			var f = b[i];
			f.machOffset = layout.addType(f.fieldType);
		}
	}
	def processIrClass(ic: IrClass) {
		var t = ic.ctype;
		// compute size of heap objects if necessary
		if (ic.minClassId < 0) return;
		if (!Facts.isLive(ic)) return;
		computeSize(ic);
		// create GC maps for object if necessary
		if (runtime != null && runtime.gc != null) runtime.gc.recordTypeRefMap(ic);
	}
	def computeSize(ic: IrClass) {
		if (ic.fields.length == 0) { // no fields
			ic.machSize = data.align(sizeOf(tagType));
			return;
		}
		// find field at maximum offset; assume no overlapping fields
		var maxf = ic.fields[0];
		for (f in ic.fields) if (f.machOffset > maxf.machOffset) maxf = f;
		ic.machSize = data.align(maxf.machOffset + sizeOf(maxf.fieldType));
	}
        def processGlobals(globals: Vector<IrField>) {
        	for (i < globals.length) {
			// XXX: could segregate global fields into refs and nonrefs
			var f = globals[i];
			var size = sizeOf(f.fieldType);
			dataRegion.align(size);
			fieldMap[f] = dataRegion.allocate(f, size);
		}
	}
	def makeMachArray(utype: Type) -> Mach_V3Array {
		var marray = Mach_V3Array.new(utype, utype);
		var layout = MachLayout.new(this);
		// 1. compute the layout for the array header
		layout.addType(tagType);
		marray.lengthOffset = layout.addType(Int.TYPE);
		marray.headerSize = data.align(layout.size);
		// 2. compute the scale for elements
		var elemType = V3Array.elementType(utype);
		// TODO: round up array element scale to a power of two if necessary
		marray.elemScale = byte.!(sizeOf(elemType));
		// 3. compute the type tag for the array
		var tag = if(isRefType(elemType), 3, 1);
		marray.typeTag = Int.box((marray.elemScale << 2) | tag);
		return marray;
	}
	def machType(t: Type) -> Type {
		match (t.typeCon.kind) {
			V3Kind.ENUM_SET => return V3.getEnumSetType(t);
			V3Kind.ENUM => return V3.getVariantTagType(t);
			V3Kind.VOID,
			V3Kind.BOOL,
			V3Kind.INT,
			V3Kind.ARRAY,
			V3Kind.CLASS,
			V3Kind.VARIANT,
			MachType.MACH_POINTER => return t;
			V3Kind.COMPONENT => return Void.TYPE;
		}
		var r = typeReps[t];
		if (r == null) typeReps[t] = r = makeMachRep(t);
		return r.machType;
	}
	def isSigned(t: Type) -> bool {
		return if(IntType.?(t), IntType.!(t).signed);
	}
	def funcRep(m: IrSpec) -> Mach_FuncRep {
		var unbound = m.getUnboundType();
		var r = Mach_FuncRep.!(typeReps[unbound]);
		if (r != null) return r;
		if (V3.isComponent(m.container)) {
			unbound = Function.prependParamType(Void.TYPE, m.getBoundType());
		}
		typeReps[unbound] = r = getFuncRep(Function.funcRefType(unbound));
		return r;
	}
	def getFuncRep(t: Type) -> Mach_FuncRep {
		var r = Mach_FuncRep.!(typeReps[t]);
		if (r == null) typeReps[t] = r = Mach_FuncRep.!(makeMachRep(t));
		return r;
	}
	private def makeMachRep(t: Type) -> MachRep {
		match (t.typeCon.kind) {
			V3Kind.FUNCREF => {
				// recursively create function type
				var ptypeList = machTypeList(Tuple.toTypeList(Function.getParamType(t)));
				var rtypeList = machTypeList(Tuple.toTypeList(Function.getReturnType(t)));
				var ftype = Function.FUNCREF.create(Lists.cons2(Tuple.newType(ptypeList), Tuple.newType(rtypeList)));
				var receiver = ptypeList != null && ptypeList.head.typeCon.kind != V3Kind.VOID;
				return Mach_FuncRep.new(receiver, t,
					code.ptrTypeCon.create1(ftype),
					Lists.toArray(ptypeList),
					Lists.toArray(rtypeList));
			}
			V3Kind.TUPLE => {
				// recursively create tuple type
				return MachRep.new(t, Tuple.newType(machTypeList(t.nested)));
			}
			V3Kind.SET => {
				// return the representation of the first element
				return MachRep.new(t, machType(t.nested.head));
			}
		}
		return unexpectedType(t, null);
	}
	def machVal(val: Val) -> Val {
		if (val == null) return null;
		if (Record.?(val)) {
			var r = Record.!(val);
			if (r.rtype.typeCon.kind == V3Kind.VARIANT) {
				// check for variants represented as enums
				if (prog.ir.isEnum(r.rtype)) return Int.box(V3.getVariantTag(r.rtype));
			}
			return mapRecord(r);
		}
		if (FuncVal.?(val)) return addrOfMethod(FuncVal.!(val).memberRef.asMethod());
		return val;
	}
	def machTypeList(list: List<Type>) -> List<Type> {
		if (list == null) return null;
		var sub = machTypeList(list.tail);
		var head = list.head, kind = head.typeCon.kind;
		if (kind == V3Kind.INT || kind == V3Kind.ENUM_SET) {
			var tn = intNorm.normType(machType(list.head));
			if (tn != null) {
				for (i = tn.size -1; i >= 0; i--) sub = List.new(tn.sub[i], sub);
				return sub;
			}
		} else {
			head = machType(head);
		}
		return if(head == list.head && sub == list.tail, list, List.new(head, sub));
	}
	def getCodeAddress(methodRef: IrSpec) -> Val {
		return addrOfMethod(methodRef.asMethod());
	}
	def getArrayLengthOffset(arrayType: Type) -> int {
		return arrayRep(arrayType).lengthOffset;
	}
	def getArrayElemScale(arrayType: Type) -> byte {
		return arrayRep(arrayType).elemScale;
	}
	def getArrayElemOffset(arrayType: Type) -> int {
		return arrayRep(arrayType).headerSize;
	}
	def getObjectSize(t: Type, r: Record) -> int {
		if (V3.isClass(t)) return irClass(t).machSize; // return the size of the object
		if (V3.isArray(t)) return data.align(arrayRep(t).getObjectSize(r)); // return the size of the header only
		return unexpectedType(t, 0);
	}
	def alignTo(i: int, a: int) -> int {
		// XXX: use masks for powers of two
		if (a > 1) return (i + a - 1) / a * a;
		return i;
	}
	def irClass(t: Type) -> IrClass {
		return prog.ir.getIrClass(t);
	}
	private def arrayRep(t: Type) -> Mach_V3Array {
		var ar = Mach_V3Array.!(typeReps[t]);
		if (ar == null) typeReps[t] = ar = makeMachArray(t); // create array representation
		return ar;
	}
	def classIdRange(t: Type) -> (int, int) {
		var r = irClass(t);
		if (r == null) return (0, 0);
		return (r.minClassId * code.addressSize, r.maxClassId * code.addressSize);
	}
	def componentFieldPtr(f: IrSpec) -> Val {
		return fieldMap[f.asField()];
	}
	def classFieldOffset(f: IrSpec) -> int {
		return f.asField().machOffset;
	}
	def methodTable(spec: IrSpec) -> Addr {
		var mtable = IrSelector.!(spec.member).mtable;
		if (mtable == null) return V3.fail1("mtable is null for %1", spec.render);
		var mtaddr = mtableMap[mtable];
		if (mtaddr == null) { // allocate space in method region for mtable
			var size = mtable.table.length * code.addressSize;
			mtaddr = metaRegion.allocate(mtable, size);
			// return a pointer to a table indexed starting from 0
			mtaddr = mtaddr.add(0 - mtable.rootId * code.addressSize);
			mtableMap[mtable] = mtaddr;
		}
		return mtaddr;
	}
	def methodTableRaw(spec: IrSpec) -> Addr {
		var mtable = IrSelector.!(spec.member).mtable;
		var addr = methodTable(spec);
		// return a pointer directly to the table.
		return addr.add(mtable.rootId * code.addressSize);
	}
	def unexpectedType<T>(t: Type, v: T) -> T {
		return prog.ERROR.unexpectedType(t, v);
	}
	def objectTag(t: Type) -> Val {
		if (V3.isClass(t)) return Int.box(irClass(t).minClassId * code.addressSize);
		if (V3.isArray(t)) return arrayRep(t).typeTag;
		return unexpectedType(t, null);
	}
	def sizeOf(t: Type) -> int {
		match(t.typeCon.kind) {
			V3Kind.COMPONENT,
			V3Kind.VOID => return 0;
			V3Kind.INT => return IntType.!(t).byteSize();
			V3Kind.BOOL => return 1;
			V3Kind.CLASS,
			V3Kind.ARRAY => return refSize;
			V3Kind.ENUM => return V3.getVariantTagType(t).byteSize();
			V3Kind.ENUM_SET => return V3.getEnumSetType(t).byteSize();
			V3Kind.VARIANT => {
				return if (prog.ir.isEnum(t), V3.getVariantTagType(t).byteSize(), refSize);
			}
			V3Kind.SET => return sizeOf(t.nested.head);
			V3Kind.FUNCREF => return code.addressSize;
			MachType.MACH_POINTER => return data.addressSize;
		}
		return unexpectedType(t, 0);
	}
	def encodeData(region: Region, u: DataBuffer, a: Addr) {
		if (a.is<Record>()) encodeRecord(u, a.get<Record>());
		else if (a.is<IrMtable>()) encodeMtable(u, a.get<IrMtable>());
		else if (a.is<IrField>()) encodeField(u, a.get<IrField>());
		else return prog.ERROR.fail("unexpected data item in region");
	}
	def encodeField(u: DataBuffer, f: IrField) {
		// encode a global field's value at the address
		encodeVal(u, prog.globalValues[f.global], f.fieldType);
	}
	def encodeRecord(u: DataBuffer, r: Record) {
		var v = r.values;
		var start = u.pos;
		if (V3.isArray(r.rtype)) {
			// encode an array record
			var rep = arrayRep(r.rtype);
			u.i4(Int.unbox(rep.typeTag));
			u.at(start + rep.lengthOffset).i4(v.length);
			if (rep.elemScale > 0) {
				var et = V3Array.elementType(r.rtype);
				for (i < v.length) {
					// XXX: special case Array<byte>, Array<Record>, Array<int> for performance
					encodeVal(u.at(start + i * rep.elemScale + rep.headerSize), v[i], et);
				}
			}
		} else if (V3.isClass(r.rtype)) {
			// encode a class record
			var ic = irClass(r.rtype), f = ic.fields;
			u.i4(ic.minClassId * code.addressSize);
			for (i < v.length) {
				encodeVal(u.at(start + f[i].machOffset), v[i], f[i].fieldType);
			}
		} else {
			return unexpectedType(r.rtype, ());
		}
		if (Aeneas.PRINT_MACH_DATA.get()) {
			var size = u.pos - start;
			var buf = StringBuffer.new();
			V3.renderResult(r, null, buf).puts(": ").puti(size).ln();
			u.render(MachDataBuffer.!(u).endAddr() - size, start, size, buf);
			Terminal.putbln(buf);
		}
	}
	def encodeMtable(u: DataBuffer, mtable: IrMtable) {
		for (m in mtable.table) {
			if (m == null) u.i4(0); // XXX: encode null
			else encodeAddr(u, addrOfMethod(m));
		}
	}
	def encodeVal(u: DataBuffer, v: Val, t: Type) {
		v = machVal(v);
		match (t.typeCon.kind) {
			V3Kind.BOOL => u.i1(Bool.toInt(Bool.unbox(v)));
			V3Kind.INT => encodeInt(u, v, IntType.!(t));
			V3Kind.ENUM => encodeInt(u, v, V3.getVariantTagType(t));
			V3Kind.ENUM_SET => encodeInt(u, v, V3.getEnumSetType(t));
			V3Kind.VARIANT,
			V3Kind.CLASS,
			V3Kind.ARRAY,
			MachType.MACH_POINTER,
			V3Kind.FUNCREF => {
				if (v == null) return u.i4(0);
				if (Addr.?(v)) return encodeAddr(u, Addr.!(v));
				if (Box<int>.?(v)) return u.i4(Box<int>.!(v).val);
			}
		} else {
			unexpectedType(t, ());
		}
	}
	def encodeInt(u: DataBuffer, v: Val, tt: IntType) {
		match(tt.byteSize()) {
			1 => u.i1(Byte.unbox(v));
			2 => u.i2(Int.unbox(v));
			4 => u.i4(Int.unbox(v));
			8 => u.i8(Long.unboxSU(v, tt.signed));
		} else {
			fail("unhandled integer byte size");
		}
	}
	def encodeAddr(u: DataBuffer, addr: Addr) {
		var abs = absolute(addr);
		if (Aeneas.PRINT_MACH.get()) {
			var buf = V3.renderResult(addr, null, Strings.toBuffer("encode "));
			Terminal.putb(buf.puts(" = 0x").putx(abs).format1(" @ %1\n", u.pos));
		}
		u.i4(abs);
	}
	def fail(msg: string) {
		prog.ERROR.fail(msg);
	}
	def isRefType(t: Type) -> bool {
		match (t.typeCon.kind) {
			V3Kind.VARIANT => return !prog.ir.isEnum(t);
			V3Kind.CLASS, V3Kind.ARRAY => return true;
			V3Kind.SET => return isRefType(t.nested.head); // Use kind of first element of set.
		}
		return false;
	}
	def addrOfMethod(m: IrMethod) -> Address<IrMethod> {
		var a = methodMap[m];
		if (a == null) methodMap[m] = a = Address.new(codeRegion, m);
		return a;
	}
	def absolute(a: Addr) -> int {
		if (a == null) return 0;
		if (a.base != null) return absolute(a.base) + a.offset;
		if (CiRuntime_Address.?(a)) return CiRuntime_Address.!(a).getAbs(runtime);
		if (a.absolute == -1) error(a);
		return a.absolute;
	}
	def error(a: Addr) {
		var buf = Strings.toBuffer("address ");
		V3.renderResult(a, null, buf);
		buf.puts(" not fixed");
		fail(buf.toString());
	}
	// compile each method into the buffer at its final address
	def layoutCode(u: MachDataBuffer, genCode: IrMethod -> void) {
		u.atEnd();
		var methods = prog.ir.methods;
		for (i < methods.length) {
			// generate code for each method
			var m = methods[i];
			u.atEnd().align(code.alignment);
			var methodStart = u.endAddr();
			addrOfMethod(m).absolute = methodStart;
			if (Aeneas.PRINT_MACH.get()) IrPrinter.new(prog).printMethodName(m, null);
			genCode(m);
			if (Aeneas.PRINT_BIN.get()) {
				printBin(m, methodStart, u);
			} else if (Aeneas.PRINT_SIZE.get()) {
				Terminal.put2("%1: %2\n", m.renderLong, u.endAddr() - methodStart);
			}
		}
		stubMap.apply(genStub(u, _));
	}
	def printBin(irm: IrMethod, methodStart: int, u: MachDataBuffer) {
		var buf = StringBuffer.new();
		var size = u.endAddr() - methodStart;
		irm.renderLong(buf).puts(": ").puti(size).ln();
		u.render(methodStart, u.max - size, size, buf);
		Terminal.putbln(buf);
	}
	// generate each stub after the code
	def genStub(u: MachDataBuffer, t: (string, (Addr, (Addr, MachDataBuffer) -> void))) {
		u.atEnd().align(code.alignment);
		var addr = t.1.0, gen = t.1.1;
		addr.absolute = u.endAddr();
		gen(addr, u);
	}
	// layout the method tables
	def layoutMeta(u: MachDataBuffer) {
		u.atEnd().align(data.addressSize);
		metaRegion.setStartAddr(u.endAddr());
		encodeRegion(metaRegion, u);
	}
	// layout all runtime datastructures
	def layoutRuntime(u: MachDataBuffer) {
		// have to finish laying out the data section to know its size
		u.atEnd().align(data.addressSize);
		Vectors.drain(recordQueue, 0, layoutRecord);
		if (runtime.gc != null) {
			// record the data size and the locations of mutable refs
			runtime.gc.recordDataSize(dataRegion.mark);
			dataRegion.apply(recordDataRefs);
		}
		runtime.encode(u);
	}
	// layout all records into the data region
	def layoutData(u: MachDataBuffer) {
		// compute addresses for all objects in the data region
		dataRegion.setStartAddr(u.endAddr());
		// encode all records into the buffer
		encodeRegion(dataRegion, u);
	}
	private def recordDataRefs(a: Addr, off: int, size: int) {
		if (a.is<IrField>()) {
			// a global field in the data section
			var f = a.get<IrField>();
			if (!f.facts.F_VALUE) {
				if (isRefType(f.fieldType)) runtime.gc.recordRootRef(off);
			}
		} else if (a.is<Record>()) {
			// an object in the data section
			runtime.gc.recordRootObject(off, a.get<Record>());
		}
	}
	def layoutAllRecords() {
		Vectors.drain(recordQueue, 0, layoutRecord);
	}
	private def layoutRecord(r: Record) {
		for (i < r.values.length) layoutVal(r.values[i]);
	}
	private def layoutVal(val: Val) {
		if (Record.?(val)) mapRecord(Record.!(val));
		else if (Closure.?(val)) layoutVal(Closure.!(val).val);
		else if (Tuple_Value.?(val)) for(e in Tuple_Value.!(val).values) layoutVal(e);
	}
	def encodeRegion(region: Region, u: MachDataBuffer) {
		// encode region contents at the end of this buffer
		var start = u.atEnd().pos;
		u.skipN(region.mark);
		var c = region.contents;
		for (i < c.length) {
			var t = c[i];
			encodeData(region, u.at(start + t.1), t.0);
		}
	}
	def isValid(addr: Addr) -> bool {
		// XXX: return true for all invalid addresses
		if (addr == null) return false;
		if (addr.equals(null)) return false;
		return true;
	}
	def mapRecord(r: Record) -> Val {
		var addr = recordMap[r];
		if (addr == null) {
			// allocate space in the data region
			dataRegion.align(data.alignment);
			addr = dataRegion.allocate(r, getObjectSize(r.rtype, r));
			recordMap[r] = addr;
			// queue for later processing
			recordQueue.add(r);
		}
		return addr;
	}
}
// Machine representation of a type.
class MachRep(origType: Type, machType: Type) { }
class Mach_FuncRep extends MachRep {
	def receiver: bool;
	def paramTypes: Array<Type>;
	def returnTypes: Array<Type>;
	var callConv: MachCallConv;
	new(receiver, oldType: Type, newType: Type, paramTypes, returnTypes) super(oldType, newType) { }
}
// Machine representation of an array.
class Mach_V3Array extends MachRep {
	var lengthOffset: int;
	var headerSize: int;
	var elemScale: byte;
	var typeTag: Box<int>;
	new(arrayType: Type, machType: Type) super(arrayType, machType) { }
	def getObjectSize(r: Record) -> int {
		if (r == null) return headerSize;
		return headerSize + r.values.length * elemScale;
	}
}
// A layout is used for adding fields sequentially to a memory area, aligning fields
// as necessary and recording which offsets contain references.
class MachLayout(mach: MachProgram) {
	var size: int;

	def addType(t: Type) -> int {
		var s = mach.sizeOf(t);
		var offset = mach.alignTo(size, s);
		size = offset + s;
		return offset;
	}
}
// Represents all runtime data structures exposed to the Virgil runtime code.
class MachRuntime(mach: MachProgram) {
	def codePageSize = 4096;
	def codePageMask = 4095;
	def codePageShift: u5 = 12;
	def codeRegion = mach.codeRegion;
	def addrs = Array<int>.new(CiRuntimeModule.max); // CiRuntime absolute addresses
	var typeCon: CiRuntime_TypeCon;

	var ri_init: RaRoot;
	var ri_gc: RaRoot;
	var ri_signal: RaRoot;

	var src: MachRtSrcTables;
	var gc: MachRtGcTables;

	var heapSize = Aeneas.HEAP_SIZE.get();

	new() {
		if (Aeneas.RT_STTABLES.get()) src = MachRtSrcTables.new(mach, this);
		if (Aeneas.RT_GCTABLES.get()) gc = MachRtGcTables.new(mach, this);
		var ptrType: Type;
		match (mach.data.addressSize) {
			2 => ptrType = MachModule.PTR_16.ptrType;
			4 => ptrType = MachModule.PTR_32.ptrType;
			8 => ptrType = MachModule.PTR_64.ptrType;
			_ => ptrType = V3.fail("invalid address size");
		}
		typeCon = CiRuntime_TypeCon.new(ptrType, this);
	}

	def recordCodeStart(addr: int) {
		CiRuntimeModule.CODE_START.setAbs(this, addr);
	}
	def recordCodeEnd(addr: int) {
		CiRuntimeModule.CODE_END.setAbs(this, addr);
	}
	def recordDataStart(addr: int) {
		CiRuntimeModule.DATA_START.setAbs(this, addr);
	}
	def recordDataEnd(addr: int) {
		CiRuntimeModule.DATA_END.setAbs(this, addr);
	}
	def getExceptionDest(off: int, ex: string, source: Source) -> Addr;
	def addHeapPointers(u: MachDataBuffer) {
		var ptrSize = mach.data.addressSize;
		u.atEnd().alignAddr(ptrSize);
		// heap begins directly after the start and end pointers.
		var start = u.endAddr(), heapStart = start + ptrSize * 2;
		// add a pointer to the start of the heap
		CiRuntimeModule.HEAP_CUR_LOC.setAbs(this, start);
		CiRuntimeModule.HEAP_END_LOC.setAbs(this, start + ptrSize);
		var heapEnd = heapStart + heapSize;
		if (Aeneas.PRINT_MACH.get()) {
			Terminal.put2("HEAP_CUR_LOC@%1 = %2\n", start, heapStart);
			Terminal.put2("HEAP_END_LOC@%1 = %2\n", start + ptrSize, heapEnd);
		}
		// Add pointers to the start and end of the heap.
		match (ptrSize) {
			1 => { u.i1(heapStart); u.i1(heapEnd); }
			2 => { u.i2(heapStart); u.i2(heapEnd); }
			4 => { u.i4(heapStart); u.i4(heapEnd); }
			8 => { u.i8(heapStart); u.i8(heapEnd); }
			_ => { return V3.fail("invalid data address size"); }
		}
		// expose the start of the heap and end of the heap as constants
		CiRuntimeModule.HEAP_START.setAbs(this, heapStart);
		CiRuntimeModule.HEAP_END.setAbs(this, heapEnd);
	}
	def codePages() -> int {
		var end = CiRuntimeModule.CODE_END.getAbs(this);
		if (end == 0) mach.prog.ERROR.fail("code end not set yet");
		return (end - CiRuntimeModule.CODE_START.getAbs(this) + codePageSize - 1) / codePageSize;
	}
	def encode(u: MachDataBuffer) {
		if (gc != null) gc.encode(u);
		if (src != null) src.encode(u);
	}
	def genAlloc(gen: MachCodeGen, i: SsaApplyOp, v: VReg);
	def genSystemOp(gen: MachCodeGen, i: SsaApplyOp, v: VReg);
	def getFatalAddress(ex: string) -> Addr {
		var addr = mach.stubMap[ex].0;
		if (addr == null) {
			addr = Address.new(codeRegion, Strings.concat("fatal_", ex));
			mach.stubMap[ex] = (addr, genFatalStub(ex, _, _));
		}
		return addr;
	}
	def genFatalStub(ex: string, addr: Addr, u: MachDataBuffer);
	def parseTestInputs(prog: Program, error: ErrorGen, expected: int) -> Array<Array<Val>> {
		// TODO: use SpecParser.parseFile
		var f = ParsedFile.new(prog.files[0], prog.inputs[0]);
		var p = ParserState.new(f, error, SpecParser.skipSpaces, null);
		if (p.optN("//@execute") < 0) {
			p.error("Could not parse execute test case");
			return [];
		}
		var runs = Lists.toArray(SpecParser.parseRuns(p));
		var result = Array<Array<Val>>.new(runs.length);
		for (i < runs.length) {
			result[i] = Lists.toArray(runs[i].input);
		}
		p.opt1('\n');
		if (p.optN("//@heap-size=") > 0) {
			var size = Int.parsePosDecimal(p.input, p.curPos);
			if (size.passed) heapSize = size.val;
			else p.error("Could not parse heap size in test case");
		} else {
			heapSize = 1024; // by default, give each test at least 1k heap
		}
		return result;
	}
	def addRoots(prog: Program, add: IrSpec -> RaRoot) {
		var typeCon = prog.typeEnv.lookup("RiRuntime");
		if (V3Component_TypeCon.?(typeCon)) {
			// some RiRuntime methods are called by compiled code
			var ctype = V3Component_TypeCon.!(typeCon).componentDecl.getDeclaredType();
			var ic = prog.ir.getIrClass(ctype);
			for (meth in ic.methods) {
				if (meth == null) continue;
				var name = meth.source.name();
				if (Aeneas.RT_GC.get() && Strings.equal(name, "gc")) ri_gc = addRoot(add, ctype, meth);
				else if (Strings.equal(name, "init")) ri_init = addRoot(add, ctype, meth);
				else if (Strings.equal(name, "signal")) ri_signal = addRoot(add, ctype, meth);
			}
		}
	}
	def addRoot(add: IrSpec -> RaRoot, ctype: Type, meth: IrMethod) -> RaRoot {
		return add(IrSpec.new(ctype, [ctype], meth));
	}
}
// A utility to encode sorted, page-indexed tables such as for stackmaps and sourcepoints.
class MachRtPageTable(
		pageTable: CiRuntime_Address,
		table: CiRuntime_Address,
		end: CiRuntime_Address,
		wide: bool) { // 8-byte entries

	def entries = Vector<(int, int, int)>.new();

	def encode(rt: MachRuntime, u: MachDataBuffer) {
		var pageTableAddr = u.endAddr();
		pageTable.setAbs(rt, pageTableAddr);
		var maxPage = rt.codePages(), maxEntry = entries.length;
		var tableAddr = pageTableAddr + 4 * (maxPage + 1);
		var tableEndAddr = tableAddr + maxEntry * 4;
		table.setAbs(rt, tableAddr);
		// encode the page table pointers
		var lastPage = -1;
		for (i < maxEntry) {
			var page = entries[i].0 / rt.codePageSize;
			if (page != lastPage) {
				// first entry on new page, fill intervening pages
				var entryAddr = tableAddr + i * 4;
				for (j = lastPage; j < page; j++) u.i4(entryAddr);
				lastPage = page;
			}
		}
		// encode the last entries of the table
		for (j = lastPage; j < maxPage; j++) u.i4(tableEndAddr);
		// encode the table entries
		for (i < maxEntry) {
			var entry = entries[i];
			u.i4((entry.0 & rt.codePageMask) | (entry.1 << rt.codePageShift));
		}
		if (!wide) return;
		// encode the wide part of the table
		if (end != null) end.setAbs(rt, u.endAddr());
		for (i < maxEntry) {
			u.i4(entries[i].2);
		}
	}
	def add(offset: int, e0: int, e1: int) {
		entries.add(offset, e0, e1);
	}
	def grow(len: int) -> this {
		entries.grow(len);
	}
}
