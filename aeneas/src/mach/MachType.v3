// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.
component MachType {
	// constants for machine kinds
	def MACH_POINTER   = 20; // pointer (non-reference)
}
// Defines operators for machine-level values.
component MachOp {
	// a null pointer to distinguish absolute offsets
	def NULL_PTR = Addr.new(null, null, 0);
	new() {
		NULL_PTR.absolute = 0;
	}
//----------------------------------------------------------------------------
	def newPtrLoad(ptrType: Type, valueType: Type) -> Operator {
		return OperatorOf.new(Opcode.PtrLoad, [ptrType, valueType], Function.sig(ptrType, valueType), (), evalError<void>);
	}
//----------------------------------------------------------------------------
	def newPtrStore(ptrType: Type, valueType: Type) -> Operator {
		return OperatorOf.new(Opcode.PtrStore, [ptrType, valueType], Function.siga([ptrType, valueType], Void.TYPE), (), evalError<void>);
	}
//----------------------------------------------------------------------------
	def newPtrCmpSwp(ptrType: Type, valueType: Type) -> Operator {
		return OperatorOf.new(Opcode.PtrCmpSwp, [ptrType, valueType], Function.siga([ptrType, valueType, valueType], Bool.TYPE), (), evalError<void>);
	}
//----------------------------------------------------------------------------
	def newPtrAdd(ptrType: Type) -> Operator {
		return OperatorOf.new(Opcode.PtrAdd, [ptrType], Function.siga([ptrType, Int.TYPE], ptrType), (), evalPtrAdd);
	}
	private def evalPtrAdd(v: void, args: Arguments) -> Result {
		var p = ptr(args, 0), off = Int.unbox(args.getArg(1));
		if (Addr.?(p)) return Addr.!(p).add(off);
		return args.throw(V3Exception.InternalError, "not a pointer");
	}
//----------------------------------------------------------------------------
	def newPtrSub(ptrType: Type) -> Operator {
		return OperatorOf.new(Opcode.PtrSub, [ptrType], Function.siga([ptrType, ptrType], Int.TYPE), (), evalPtrSub);
	}
	private def evalPtrSub(v: void, args: Arguments) -> Result {
		var p = ptr(args, 0), q = ptr(args, 1);
		if (p.base == q.base) return Int.box(p.offset - q.offset);
		if (p.base == q) return Int.box(p.offset);
		return args.throw(V3Exception.InternalError, "unfoldable pointer subtraction");
	}
//----------------------------------------------------------------------------
	def newPtrAtContents(elemType: Type, ptrType: Type) -> Operator {
		return OperatorOf.new(Opcode.PtrAtContents, [elemType], Function.sig(V3Array.newType(elemType), ptrType), (), evalPtrAtContents);
	}
	def evalPtrAtContents(v: void, args: Arguments) -> Result {
		return evalError((), args);
	}
//----------------------------------------------------------------------------
	def newAlloc(ptrType: Type) -> Operator {
		return OperatorOf.new(Opcode.Alloc, [ptrType], Function.sig(Int.TYPE, ptrType), (), evalError<void>);
	}
//----------------------------------------------------------------------------
	def opIntUgteq: Operator = newUnsignedCmp(Opcode.UnsignedGteq, Int.TYPE);
	def newUnsignedCmp(opcode: Opcode, t: Type) -> Operator {
		return OperatorOf<void>.new(opcode, TypeUtil.NO_TYPES, Function.siga([t, t], Bool.TYPE), (), evalIntUgteq);
	}
	def evalIntUgteq(v: void, args: Arguments) -> Result {
		var a = u32.!(Int.unbox(args.getArg(0))), b = u32.!(Int.unbox(args.getArg(1)));
		return if(a >= b, Bool.TRUE, Bool.FALSE);
	}
//----------------------------------------------------------------------------
	def newCallAddress(rep: Mach_FuncRep) -> Operator {
		var funcType = rep.machType.nested.head;
		return OperatorOf.new(Opcode.CallAddress, [rep.machType], Function.siga(rep.paramTypes, Function.getReturnType(funcType)), rep, evalError<Mach_FuncRep>);
	}
//----------------------------------------------------------------------------
	def newCallerIp(ptrType: Type) -> Operator {
		return OperatorOf.new(Opcode.CallerIp, TypeUtil.NO_TYPES, Function.sig(Void.TYPE, ptrType), (), evalError<void>);
	}
//----------------------------------------------------------------------------
	def newCallerSp(ptrType: Type) -> Operator {
		return OperatorOf.new(Opcode.CallerSp, TypeUtil.NO_TYPES, Function.sig(Void.TYPE, ptrType), (), evalError<void>);
	}
//----------------------------------------------------------------------------
	def evalError<T>(v: T, args: Arguments) -> Result {
		return args.throw(V3Exception.InternalError, "nonfoldable operation");
	}
	private def ptr(args: Arguments, i: int) -> Addr {
		var p = args.getArg(i);
		if (p == null) return NULL_PTR;
		return Addr.!(p);
	}
}
// module which provides the "pointer" type
component MachModule {
	def PTR_16: MachPointer_TypeCon = MachPointer_TypeCon.new(16);
	def PTR_32: MachPointer_TypeCon = MachPointer_TypeCon.new(32);
	def PTR_64: MachPointer_TypeCon = MachPointer_TypeCon.new(64);
	def install(prog: Program) {
		// install the builtin "Pointer" type in the program
		prog.typeEnv.add(PTR_32);
	}
}
// type constructor for machine types
class Mach_TypeCon extends Member_TypeCon {
       def width: int;
       def size: int = (width + 7) >>> 3;
       new(name: string, kind: int, arity: int, width) super(name, kind, arity, TypeUtil.globalCache) { }
}
// Type constructor for language-level "Pointer" type, available to programs
// that target machine targets (e.g. x86-darwin)
class MachPointer_TypeCon extends Mach_TypeCon {
	def instMembers = Strings.newMap<(Operator, List<TypeParam>)>();
	var ptrType: Type;
	var opAdd: Operator;
	var opSub: Operator;
	var opLt: Operator;
	var opGt: Operator;
	var opLteq: Operator;
	var opGteq: Operator;
	var atContents: Operator;

	new(width: int) super("Pointer", MachType.MACH_POINTER, 0, width) {
		ptrType = create0();
		var typeParam = TypeUtil.ONE_TYPE_PARAM.head;
		var arrayType = V3Array.newType(typeParam);
		instMembers["load"] = (MachOp.newPtrLoad(ptrType, typeParam), TypeUtil.ONE_TYPE_PARAM);
		instMembers["store"] = (MachOp.newPtrStore(ptrType, typeParam), TypeUtil.ONE_TYPE_PARAM);
		instMembers["cmpswp"] = (MachOp.newPtrCmpSwp(ptrType, typeParam), TypeUtil.ONE_TYPE_PARAM);
		atContents = MachOp.newPtrAtContents(typeParam, ptrType);
		opAdd = MachOp.newPtrAdd(ptrType);
		opSub = MachOp.newPtrSub(ptrType);
		opLt = MachOp.newUnsignedCmp(Opcode.UnsignedLt, ptrType);
		opLteq = MachOp.newUnsignedCmp(Opcode.UnsignedLteq, ptrType);
		opGt = MachOp.newUnsignedCmp(Opcode.UnsignedGt, ptrType);
		opGteq = MachOp.newUnsignedCmp(Opcode.UnsignedGteq, ptrType);
	}
	def lookupMember(t: Type, name: string, receiver: bool) -> LookupResult {
		if (receiver) {
			// p.{load, store}
			var op = instMembers[name];
			if (op.0 != null) return LookupResult.Partial(op.0, op.1);
		} else {
			// Pointer.{SIZE, atContents}
			// Pointer.{load, store}
			if (Strings.equal(name, "atContents")) return LookupResult.Inst(atContents, TypeUtil.ONE_TYPE_PARAM);
			if (Strings.equal(name, "SIZE")) return LookupResult.Const(Int.TYPE, Int.box(size));
			if (Strings.equal(name, "NULL")) return LookupResult.Const(ptrType, null);
			var op = instMembers[name];
			if (op.0 != null) return LookupResult.Inst(op.0, op.1);
		}
		return LookupResult.None;
	}
	def lookupInfix(infix: byte, rtype: Type) -> Operator {
		match (infix) {
			V3Infix.Add =>  return opAdd;
			V3Infix.Sub =>  return opSub;
			V3Infix.Lt =>   return opLt;
			V3Infix.Gt =>   return opGt;
			V3Infix.Lteq => return opLteq;
			V3Infix.Gteq => return opGteq;
		}
		return null;
	}
}
