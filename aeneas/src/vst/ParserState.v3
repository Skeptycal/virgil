// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// An encapsulation of all the state needed during parsing,
// including the current location, current character, mapping between
// line end and character offsets, the compiler, filename, etc.
// Note that this has utility routines but no language-specific functionality.
class ParserState {
	var curPos: int;			// current position
	var curByte: byte;			// current character
	var curLine: int;			// current line number
	var curCol: int;			// current column
	def file: ParsedFile;			// the file being parsed
	def fileName = file.fileName;		// name of the file
	def input = file.input;			// data being parsed
	def lineEnds = file.lineEnds; 		// mapping of line # -> end byte offset
	def skipFunc: ParserState -> void;	// function to skip whitespace
	def typeCache: TypeCache;		// typeCache; TODO: V3-specific
	def ERROR: ErrorGen;			// the error generator
	var errors: List<int>;			// errors generated so far

	new(file, ERROR, skipFunc, typeCache) {
		curLine = 1;
		curCol = 1;
		if (input.length > 0) curByte = input(0);
		skipFunc(this);
	}
	// extract a token of the specified length from the current position and advance
	def token(len: int) -> Token {
		var t = tokenFor(curPos, curPos + len, curLine, curCol);
		advance(len);
		return t;
	}
	// extract a token between start and end
	def tokenAt(start: int, end: int) -> Token {
		return tokenFor(start, end, line(start), column(start));
	}
	private def tokenFor(start: int, end: int, l: int, c: int) -> Token {
		var b = Array<byte>.new(end - start), d = input;
		for (p = start; p < end; p++) { // inlined array copy
			b(p - start) = d(p);
		}
		return Token.new(fileName, b, l, c);
	}
	// advance by "len" bytes and skip to next non-whitespace byte
	def advance(len: int) -> int {
		var p = setPos(curPos + len, curLine, curCol + len);
		skipFunc(this);
		return p;
	}
	// advance by 1 byte and skip to next non-whitespace byte (specialized for speed)
	def advance1() -> ParserState {
		var newPos = 1 + curPos;
		if (newPos < input.length) {
			curPos = newPos;
			curCol++;
			curByte = input(newPos);
			skipFunc(this);
		} else {
			curPos = input.length;
			curByte = '\x00';
		}
		return this;
	}
	// optionally consume a sequence of characters and advance()
	def optN(s: string) -> int {
		if (curPos + s.length < input.length) {
			var p = curPos, d = input, max = s.length;
			for (i < max) {
				if (s(i) != d(i + p)) return -1;
			}
			return advance(s.length);
		}
		return -1;
	}
	// optionally consume a single character and advance()
	def opt1(ch: byte) -> int {
		if (curByte == ch) { var p = curPos; advance1(); return p; }
		return -1;
	}
	def expected<T>(v: T) -> int {
		error1("\"%1\" expected", v);
		return curPos;
	}
	// consume a single character and advance(), signalling an error if it doesn't match
	def req1(ch: byte) -> int {
		if (curByte == ch) { var p = curPos; advance1(); return p; }
		return expected(ch);
	}
	def reqN(s: string) -> int {
		if (curPos + s.length >= input.length) return expected(s);
		for (i < s.length) {
			if (input(curPos + i) != s(i)) return expected(s);
		}
		var p = curPos;
		advance(s.length);
		return p;
	}
	// simply set the position and update the current character
	def setPos(newPos: int, newLine: int, newCol: int) -> int {
		var p = curPos;
		if (newPos == p) return newPos;
		curLine = newLine;
		curCol = newCol;
		if (newPos < input.length) { curPos = newPos; curByte = input(newPos); }
		else { curPos = input.length; curByte = '\x00'; }
		return p;
	}
	// return the line at the specified offset
	def line(at: int) -> int {
		if (at == curPos) return curLine;
		for (i = lineEnds.length - 1; i >= 0; i--) {
			// XXX: linear search OK for near the end, use binary search for random access
			if (lineEnds.get(i) <= at) return i + 2;
		}
		return 1;
	}
	// return the column at the specified offset
	def column(at: int) -> int {
		if (at == curPos) return curCol;
		var q = 0, c = 1, d = input;
		var l = line(at) - 1;
		if (l > 0) q = 1 + lineEnds.get(l - 1);
		while (q < at) {
			var ch = d(q);
			if (ch == '\t') c = 1 + (((c + 8) >>> 3) << 3); // tab character
			else if (ch == '\n') {
				ERROR.fail(Strings.format2("missed a newline @ %1:%2", l + 1, c));
				c = 1;
			}
			else c++;
			q++;
		}
		return c;
	}
	// signal an error with the specified message
	def error(msg: string) {
		if (noErrorsAt(curPos)) {
			errorAt(range(), msg);
			errors = List<int>.new(curPos, errors);
		}
	}
	// signal an error with the specified message and parameter
	def error1<T>(msg: string, param: T) {
		error(Strings.format1(msg, param));
	}
	// signal error at the specified token
	def errorAt(range: FileRange, msg: string) {
		ERROR.addError(range, file.extractLine(range.beginLine), "ParseError", msg);
	}
	def errorAtOffset(offset: int, msg: string) {
		curPos = curPos + offset;
		curCol = curCol + offset;
		error(msg);
		curPos = curPos - offset;
		curCol = curCol + offset;
	}
	// only generate one parse error per position.
	private def noErrorsAt(q: int) -> bool {
		if (ERROR.numErrors >= ERROR.maxErrors) return false; // too many errors
		for (l = errors; l != null; l = l.tail) { // linear search, assume errors are added in order
			if (l.head == q) return false;
			if (l.head < q) return true;
		}
		return true;
	}
	// convert the current location to a source range
	def range() -> FileRange {
		var l = line(curPos), c = column(curPos);
		return FileRange.new(fileName, l, c, l, c);
	}
	// peek N characters ahead without advancing
	def peek(i: int) -> byte {
		var q = curPos + i;
		if (q < input.length) return input(q);
		return '\x00';
	}
	// peek ahead 0 or more characters of the given type
	def star(i: int, f: byte -> bool) -> int {
		var d = input, max = d.length;
		for (q = curPos + i; q < max; q++) {
			if (!f(d(q))) return q;
		}
		return max;
	}
	// peek ahead 1 or more characters of the given type
	def plus(i: int, f: byte -> bool) -> int {
		if (f(peek(i))) {
			var d = input, max = d.length;
			for (q = curPos + i + 1; q < max; q++) {
				if (!f(d(q))) return q;
			}
			return max;
		}
		return -1;
	}
	def debug(before: bool, len: int) {
		if (before) Terminal.put("before ");
		else Terminal.put("after  ");
		Terminal.put2("%1|%2", len, Terminal.CTRL_CYAN);
		var max = curPos + len;
		for (i = curPos; i < max && i < input.length; i++) {
			putc(input(i));
		}
		Terminal.put2("%1>%2", Terminal.CTRL_RED, Terminal.CTRL_GREEN);
		for (i = max; i < input.length && input(i) != '\n'; i++) {
			putc(input(i));
		}
		Terminal.put2("%1| %2", Terminal.CTRL_DEFAULT, curByte);
		Terminal.put2(" @ %1:%2 = ", line(curPos), column(curPos));
		Terminal.put1("%1\n", (curPos + len));
	}
	def putc(ch: byte) {
		if (ch == '\n') Terminal.put("\\n");
		else if (ch == '\t') Terminal.put("\\t");
		else Terminal.putc(ch);
	}
	// verify that all new line characters have their positions set in the map
	def verifyLineEnds() -> bool {
		var j = 0, d = input, max = d.length;
		for (i < curPos) {
			if (d(i) == '\n') {
				if (j >= lineEnds.length || lineEnds.get(j) != i) return false;
				j++;
			}
		}
		return true;
	}
	// extract the current position as a file point
	def point() -> FilePoint {
		return FilePoint.new(fileName, curLine, curCol);
	}
	def end(start: FilePoint) -> FileRange {
		return FileRange.new(fileName, start.beginLine, start.beginColumn, curLine, curCol);
	}
}
