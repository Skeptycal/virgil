// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Constants for the syntax of infix operators, used during parsing and
// semantic analysis
component V3Infix {
	def Equal    = '\x01';
	def NotEqual = '\x02';
	def Add      = '\x03';
	def Sub      = '\x04';
	def Mul      = '\x05';
	def Div      = '\x06';
	def Mod      = '\x07';
	def And      = '\x08';
	def Or       = '\x09';
	def AndAnd   = '\x0a';
	def OrOr     = '\x0b';
	def Xor      = '\x0c';
	def Lt       = '\x0f';
	def Gt       = '\x10';
	def Lteq     = '\x11';
	def Gteq     = '\x12';
	def Shl      = '\x13';
	def Sar      = '\x14';
	def Shr      = '\x15';
	def NumOps   = Shr + 1;

	def PREC_MASK = '\x0F';
	def LEGAL_MEMBER = 0x10;
	def LEGAL_COMPOUND = 0x20;
	def LEGAL_BINOP = 0x40;

	def names: Array<string> = Array.new(NumOps);
	def attr: Array<byte> = Array.new(NumOps);

	def op(num: int, name: string, p: int, a: int) {
		names[num] = name;
		attr[num] = byte.!((p & PREC_MASK) | a);
	}

	new() {
		def M = LEGAL_MEMBER, C = LEGAL_COMPOUND, B = LEGAL_BINOP;
		op(Equal,	"==",   6, M);
		op(NotEqual,	"!=",   6, M);
		op(Add,		"+",   13, M|C);
		op(Sub,		"-",   13, M|C);
		op(Mul,		"*",   14, M|C);
		op(Div,		"/",   14, M|C);
		op(Mod,		"%",   14, M|C);
		op(And,		"&",    5, M|C);
		op(Or,		"|",    3, M|C);
		op(AndAnd,	"&&",   2, M|C);
		op(OrOr,	"||",   1, M|C);
		op(Xor,		"^",    4, M|C);
		op(Lt,		"<",    8, M|C);
		op(Gt,		">",    8, M|C);
		op(Lteq,	"<=",   8, M);
		op(Gteq,	">=",   8, M);
		op(Shl,		"<<",  12, M|C);
		op(Sar,		">>",  12, M|C);
		op(Shr,		">>>", 12, M|C);
	}
	def parse(name: string) -> byte {
		// XXX: avoid the need to create an entire ParserState here
		var f = ParsedFile.new("<input>", name);
		var p = ParserState.new(f, ErrorGen.new(1), Parser.skipNone, null);
		var r = Parser.parseInfix(p);
		return if(r != null, r.infix);
	}
	def prec(num: byte) -> byte {
		return attr[num] & PREC_MASK;
	}
	def isLegalCompound(num: byte) -> bool {
		return (attr[num] & LEGAL_COMPOUND) != 0;
	}
}
// This component centralizes all the operators in the Virgil III language.
// XXX: Use TypeArgs instead of Array<Type> to represent type arguments
component V3Op {
	def NONE: Array<Type> = [];
	def renderOp(op: Operator) -> string {
		return renderInto(op, StringBuffer.new()).toString();
	}
	def renderInto(op: Operator, buf: StringBuffer) -> StringBuffer {
		buf.puts(op.opcode.name);
		if (TerminalBuffer.?(buf)) TerminalBuffer.!(buf).green();
		if (OperatorOf<void>.?(op)) {
			renderTypeArgs(op.typeArgs, buf);
			return buf.end();
		}
		buf.putc('[');
		if (OperatorOf<TypeCast>.?(op)) {
			buf.puts(op.attr<TypeCast>().name());
		} else if (OperatorOf<IrMember>.?(op)) {
			var m = op.attr<IrMember>();
			if (m != null) m.render(buf);
		} else if (OperatorOf<int>.?(op)) {
			buf.puti(op.attr<int>());
		} else if (OperatorOf<string>.?(op)) {
			buf.puts(op.attr<string>());
		} else if (OperatorOf<Int_TypeCon>.?(op)) {
			buf.puts(op.attr<Int_TypeCon>().name);
		} else if (OperatorOf<Operator>.?(op)) {
			renderInto(op.attr<Operator>(), buf);
		} else if (OperatorOf<VstOperator>.?(op)) {
			var vst = op.attr<VstOperator>();
			buf.puts(vst.name);
			match (vst) {
//				EnumGetParam(field): buf.format1("[%1]", field.name);
//				EnumSetHas(vcase): buf.format1("[%1]", vcase.name);
				_ => ;
			}
		} else {
			buf.puts("???");
		}
		renderTypeArgs(op.typeArgs, buf.putc(']'));
		return buf.end();
	}
	def needsNullCheck(app: SsaInstr, obj: SsaInstr) -> bool {
		if (obj.facts.V_NON_ZERO) return false;
		return !app.facts.O_NO_NULL_CHECK;
	}
	def newOp0(opcode: Opcode, typeArgs: Array<Type>, paramTypes: Array<Type>, resultType: Type, func: (void, Arguments) -> Result) -> Operator {
		return OperatorOf<void>.new(opcode, typeArgs, paramTypes, resultType, (), func);
	}
	def newOp1<T>(opcode: Opcode, typeArgs: Array<Type>, paramTypes: Array<Type>, resultType: Type, func: (T, Arguments) -> Result, param: T) -> Operator {
		return OperatorOf<T>.new(opcode, typeArgs, paramTypes, resultType, param, func);
	}
	def renderTypeArgs(typeArgs: Array<Type>, buf: StringBuffer) -> StringBuffer {
		if (typeArgs.length > 0) {
			buf.putc('<');
			for (i < typeArgs.length) {
				if (i > 0) buf.puts(", ");
				var t = typeArgs[i];
				if (t == null) buf.puts("null");
				else t.render(buf);
			}			
			buf.putc('>');
		}
		return buf;
	}
	def extractIrSpec(exp: Operator) -> IrSpec {
		var ta = exp.typeArgs;
		return IrSpec.new(ta[0], ta, exp.attr<IrMember>());
	}
	def evalIrSpec(member: IrMember, args: Arguments) -> IrSpec {
		var ta = args.getTypes();
		return IrSpec.new(ta[0], ta, member);
	}
	def b(args: Arguments, index: int) -> bool { return Bool.unbox(args.getArg(index)); }

//----------------------------------------------------------------------------
	def newEqual(t: Type) -> Operator {
		var opcode: Opcode = Opcode.OverloadedEq;
		match (t.typeCon.kind) {
			V3Kind.BOOL => return opBoolEq;
			V3Kind.ENUM,
			V3Kind.ENUM_SET,
			V3Kind.INT => opcode = Opcode.IntEq;
			MachType.MACH_POINTER,
			V3Kind.ARRAY,
			V3Kind.CLASS,
			V3Kind.FUNCREF => opcode = Opcode.RefEq;
			V3Kind.VARIANT => opcode = Opcode.VariantEq;
		}
		return newOp0(opcode, [t], [t, t], Bool.TYPE, evalEqual);
	}
	def newRefEqual(t: Type) -> Operator {
		return newOp0(Opcode.RefEq, [t], [t, t], Bool.TYPE, evalEqual);
	}
	def newIntEqual(t: Type) -> Operator {
		return newOp0(Opcode.IntEq, [t], [t, t], Bool.TYPE, evalEqual);
	}
	def evalEqual(v: void, args: Arguments) -> Result {
		return Bool.box(Values.equal(args.getArg(0), args.getArg(1)));
	}
//----------------------------------------------------------------------------
	def newIntConvert(ft: Type, tt: Type) -> Operator {
		return newOp0(Opcode.IntConvert, [ft, tt], [ft], tt, evalIntConvert);
	}
	def evalIntConvert(v: void, a: Arguments) -> Result {
		var val = a.getArg(0), r = IntOp.evalConversion(a.getType(0), a.getType(1), val);
		if (r.approx == CastOp.TRUE) return val;
		if (r.approx == CastOp.VALUE) return r.result;
		else return a.throw(V3Exception.TypeCheck, null);
	}
//----------------------------------------------------------------------------
	def opBoolEq = newOp0(Opcode.BoolEq, [Bool.TYPE], [Bool.TYPE, Bool.TYPE], Bool.TYPE, evalEqual);
//----------------------------------------------------------------------------
	def opBoolAnd = newOp0(Opcode.BoolAnd, TypeUtil.NO_TYPES, [Bool.TYPE, Bool.TYPE], Bool.TYPE, evalBoolAnd);
	def evalBoolAnd(v: void, a: Arguments) -> Result { return Bool.box(b(a, 0) && b(a, 1)); }
//----------------------------------------------------------------------------
	def opBoolOr = newOp0(Opcode.BoolOr, TypeUtil.NO_TYPES, [Bool.TYPE, Bool.TYPE], Bool.TYPE, evalBoolOr);
	def evalBoolOr(v: void, a: Arguments) -> Result { return Bool.box(b(a, 0) || b(a, 1)); }
//----------------------------------------------------------------------------
	def opBoolNot: Operator	= newOp0(Opcode.BoolNot, NONE, [Bool.TYPE], Bool.TYPE, evalBoolNot);
	def evalBoolNot(v: void, a: Arguments) -> Result { return Bool.box(!b(a, 0)); }
//----------------------------------------------------------------------------
	def newIntWide(op: Operator, normal: Array<Type>, result: Type) -> Operator {
		return OperatorOf.new(Opcode.IntWide, TypeUtil.NO_TYPES, normal, result, op, evalIntWide);
	}
	def evalIntWide(op: Operator, args: Arguments) -> Result {
		return args.throw(V3Exception.InternalError, "unimplemented");
	}
//----------------------------------------------------------------------------
	def newTypeCast(ff: Type, tt: Type) -> OperatorOf<TypeCast> {
		var cast = TypeSystem.newTypeCast(ff, tt);
		return OperatorOf.new(Opcode.TypeCast, [ff, tt], [ff], tt, cast, evalTypeCast);
	}
	def evalTypeCast(cast: TypeCast, args: Arguments) -> Result {
		var val = args.getArg(0), r = cast.eval(args.getType(0), args.getType(1), val);
		if (r.approx == CastOp.TRUE) return val;
		if (r.approx == CastOp.VALUE) return r.result;
		else return args.throw(V3Exception.TypeCheck, null);
	}
//----------------------------------------------------------------------------
	def newTypeQuery(ff: Type, tt: Type) -> OperatorOf<TypeCast> {
		var cast = TypeSystem.newTypeQuery(ff, tt);
		return OperatorOf.new(Opcode.TypeQuery, [ff, tt], [ff], Bool.TYPE, cast, evalTypeQuery);
	}
	def evalTypeQuery(cast: TypeCast, args: Arguments) -> Result {
		var val = args.getArg(0), r = cast.eval(args.getType(0), args.getType(1), val);
		return if(r.approx == CastOp.TRUE, Bool.TRUE, Bool.FALSE);
	}
//----------------------------------------------------------------------------
	def newTypeSubsume(typeFrom: Type, typeTo: Type) -> Operator {
		return newOp0(Opcode.TypeSubsume, [typeFrom, typeTo], [typeFrom], typeTo, evalTypeSubsume);
	}
	def evalTypeSubsume(v: void, args: Arguments) -> Result {
		return args.getArg(0);
	}
//----------------------------------------------------------------------------
	def newArrayAlloc(arrayType: Type) -> Operator {
		return newOp0(Opcode.ArrayAlloc, [arrayType], Int.TYPE_ARRAY, arrayType, evalArrayAlloc);
	}
	def evalArrayAlloc(v: void, args: Arguments) -> Result {
		var length = Int.unbox(args.getArg(0));
		if (length < 0) return args.throw(V3Exception.LengthCheck, null);
		var arrayType = args.getType(0);
		if (arrayType.open()) return args.throw(V3Exception.InternalError, Strings.format1("type %1 should not be open", arrayType.render));
		return args.getProgram().newRecord(arrayType, length);
	}
//----------------------------------------------------------------------------
	def newArrayInit(arrayType: Type, length: int) -> Operator {
		var etype = V3Array.elementType(arrayType);
		var types = Array<Type>.new(length);
		for (i < types.length) types[i] = etype;
		return newOp1(Opcode.ArrayInit, [arrayType], types, arrayType, evalArrayInit, length);
	}
	def evalArrayInit(length: int, args: Arguments) -> Result {
		var array = args.getProgram().newRecord(args.getType(0), length);
		for (i < length) array.values[i] = args.getArg(i);
		return array;
	}
//----------------------------------------------------------------------------
	def newArrayGetElem(arrayType: Type) -> Operator {
		return newOp0(Opcode.ArrayGetElem, [arrayType], [arrayType, Int.TYPE], V3Array.elementType(arrayType), evalArrayGetElem);
	}
	def evalArrayGetElem(v: void, args: Arguments) -> Result {
		var array = Record.!(args.getArg(0));
		var index = Int.unbox(args.getArg(1));
		if (array == null) return args.throw(V3Exception.NullCheck, null);
		if (index < 0 || index >= array.values.length) return args.throw(V3Exception.BoundsCheck, null);
		return array.values[index];
	}
//----------------------------------------------------------------------------
	def newArraySetElem(arrayType: Type) -> Operator {
		var etype = V3Array.elementType(arrayType);
		return newOp0(Opcode.ArraySetElem, [arrayType], [arrayType, Int.TYPE, etype], Void.TYPE, evalArraySetElem);
	}
	def evalArraySetElem(v: void, args: Arguments) -> Result {
		var array = Record.!(args.getArg(0));
		var index = Int.unbox(args.getArg(1));
		if (array == null) return args.throw(V3Exception.NullCheck, null);
		if (index < 0 || index >= array.values.length) return args.throw(V3Exception.BoundsCheck, null);
		var val = args.getArg(2);
		array.values[index] = val;
		return val;
	}
//----------------------------------------------------------------------------
	def newArrayGetLength(arrayType: Type) -> Operator {
		return newOp0(Opcode.ArrayGetLength, [arrayType], [arrayType], Int.TYPE, evalArrayGetLength);
	}
	def evalArrayGetLength(v: void, args: Arguments) -> Result {
		var array = Record.!(args.getArg(0));
		if (array == null) return args.throw(V3Exception.NullCheck, null);
		return Int.box(array.values.length);
	}
//----------------------------------------------------------------------------
	def newClassAlloc(newRef: IrSpec) -> Operator {
		var ftype = newRef.getBoundType(), paramTypes = Function.getParamTypeArray(ftype);
		return newOp1(Opcode.ClassAlloc, [newRef.container], paramTypes, newRef.container, evalClassAlloc, newRef.member);
	}
	def evalClassAlloc(newRef: IrMember, args: Arguments) -> Result {
		var spec = evalIrSpec(newRef, args), prog = args.getProgram();
		var record = prog.newRecord(spec.container, prog.ir.numFields(spec.container));
		return args.fwCall(spec, record, 0, args.numArgs());
	}
	def newEmptyClassAlloc(classType: Type) -> Operator {
		return newOp1(Opcode.ClassAlloc, [classType], TypeUtil.NO_TYPES, classType, evalEmptyClassAlloc, null);
	}
	def evalEmptyClassAlloc(newRef: IrMember, args: Arguments) -> Result {
		var classType = args.getType(0), prog = args.getProgram();
		var record = prog.newRecord(classType, prog.ir.numFields(classType));
		return record;
	}
//----------------------------------------------------------------------------
	def newClassGetField(fieldRef: IrSpec) -> Operator {
		var tt = [fieldRef.container];
		return newOp1(Opcode.ClassGetField, tt, tt,
			fieldRef.getFieldType(), evalClassGetField, fieldRef.member);
	}
	def evalClassGetField(fieldRef: IrMember, args: Arguments) -> Result {
		var object = Record.!(args.getArg(0));
		if (object == null) {
			if (V3.isVariant(fieldRef.container)) return null;
			else return args.throw(V3Exception.NullCheck, null);
		}
		return object.values[fieldRef.index];
	}
//----------------------------------------------------------------------------
	def newClassInitField(fieldRef: IrSpec) -> Operator {
		var fieldType = fieldRef.getFieldType();
		return newOp1(Opcode.ClassInitField, [fieldRef.container], [fieldRef.container, fieldType], Void.TYPE, evalClassSetField, fieldRef.member);
	}
//----------------------------------------------------------------------------
	def newClassSetField(fieldRef: IrSpec) -> Operator {
		var fieldType = fieldRef.getFieldType();
		return newOp1(Opcode.ClassSetField, [fieldRef.container], [fieldRef.container, fieldType], Void.TYPE, evalClassSetField, fieldRef.member);
	}
	def evalClassSetField(fieldRef: IrMember, args: Arguments) -> Result {
		var object = Record.!(args.getArg(0));
		if (object == null) return args.throw(V3Exception.NullCheck, null);
		var val = args.getArg(1);
		object.values[fieldRef.index] = val;
		return Values.BOTTOM;
	}
//----------------------------------------------------------------------------
	def newClassGetMethod(methodRef: IrSpec) -> Operator {
		var typeArgs = methodRef.typeArgs;
		return newOp1(Opcode.ClassGetMethod, typeArgs, [methodRef.container], 
			methodRef.getBoundType(), evalClassGetMethod, methodRef.member);
	}
	def evalClassGetMethod(meth: IrMember, args: Arguments) -> Result {
		var obj = Record.!(args.getArg(0));
		var spec = evalIrSpec(meth, args);
		if (obj == null) {
			if (!V3.isVariant(meth.container)) return args.throw(V3Exception.NullCheck, null);
		}
		return Closure.new(obj, spec);
	}
//----------------------------------------------------------------------------
	def newClassGetVirtual(methodRef: IrSpec) -> Operator {
		var typeArgs = methodRef.typeArgs;
		return newOp1(Opcode.ClassGetVirtual, typeArgs, [methodRef.container], 
			methodRef.getBoundType(), evalClassGetVirtual, methodRef.member);
	}
	def evalClassGetVirtual(member: IrMember, args: Arguments) -> Result {
		var spec = evalIrSpec(member, args), obj = getRecordForCall(args);
		if (obj == null) {
			if (V3.isVariant(member.container)) spec = args.getProgram().ir.resolveVariantDefaultMethodImpl(spec);
			else return args.throw(V3Exception.NullCheck, null);
		} else {
			spec = args.getProgram().ir.resolveMethodImpl(obj.rtype, spec);
		}
		return Closure.new(obj, spec);
	}
//----------------------------------------------------------------------------
	def newClassGetVirtFunc(methodRef: IrSpec) -> Operator {
		var typeArgs = methodRef.typeArgs;
		return newOp1(Opcode.ClassGetVirtFunc, typeArgs, [methodRef.container], 
			methodRef.getFuncType(), evalClassGetVirtFunc, methodRef.member);
	}
	def evalClassGetVirtFunc(member: IrMember, args: Arguments) -> Result {
		var obj = Record.!(args.getArg(0)), spec = evalIrSpec(member, args);
		if (obj == null) {
			if (V3.isVariant(member.container)) spec = args.getProgram().ir.resolveVariantDefaultMethodImpl(spec);
			else return args.throw(V3Exception.NullCheck, null);
		} else {
			spec = args.getProgram().ir.resolveMethodImpl(obj.rtype, spec);
		}
		return FuncVal.new(spec);
	}
//----------------------------------------------------------------------------
	def newInit(meth: IrMethod) -> Operator {
		return newOp1(Opcode.Init, TypeUtil.NO_TYPES, TypeUtil.NO_TYPES, meth.container, evalInit, meth);
	}
	def evalInit(meth: IrMethod, args: Arguments) -> Result {
		var index = VstNew.!(meth.source).initIndex;
		var prog = args.getProgram();
		if (prog.initState[index] == InitState.Uninit) {
			var ctype = meth.container;
			var receiver = Values.BOTTOM;
			prog.initState[index] = InitState.Running;
			var spec = IrSpec.new(ctype, [ctype], meth);
			return args.fwCall(spec, receiver, 0, 0);
		}
		return Values.BOTTOM;
	}
//----------------------------------------------------------------------------
	def newComponentGetField(fieldRef: IrSpec) -> Operator {
		var tt = [fieldRef.container];
		return newOp1(Opcode.ComponentGetField, tt, tt,
			fieldRef.getFieldType(), evalComponentGetField, fieldRef.member);
	}
	def evalComponentGetField(memberRef: IrMember, args: Arguments) -> Result {
		return args.getProgram().globalValues[memberRef.global];
	}
//----------------------------------------------------------------------------
	def newComponentSetField(fieldRef: IrSpec) -> Operator {
		var fieldType = fieldRef.getFieldType();
		return newOp1(Opcode.ComponentSetField, [fieldRef.container], [fieldRef.container, fieldType], 
			Void.TYPE, evalComponentSetField, fieldRef.member);
	}
	def evalComponentSetField(memberRef: IrMember, args: Arguments) -> Result {
		args.getProgram().globalValues[memberRef.global] = args.getArg(1);
		return Values.BOTTOM;
	}
//----------------------------------------------------------------------------
	def newComponentGetMethod(methodRef: IrSpec) -> Operator {
		var typeArgs = methodRef.typeArgs;
		return newOp1(Opcode.ComponentGetMethod, typeArgs, [methodRef.container], 
			methodRef.getBoundType(), evalComponentGetMethod, methodRef.member);
	}
	def evalComponentGetMethod(member: IrMember, args: Arguments) -> Result {
		var memberRef = evalIrSpec(member, args);
		return Closure.new(args.getArg(0), memberRef);
	}
//----------------------------------------------------------------------------
	def newTupleCreate(tupleType: Type) -> Operator {
		var paramTypes = Lists.toArray(tupleType.nested);
		return newOp1(Opcode.TupleCreate, [tupleType], paramTypes, tupleType, evalTupleCreate, paramTypes.length);
	}
	def evalTupleCreate(length: int, args: Arguments) -> Result {
		var vals = Array<Val>.new(length);
		for (i < vals.length) vals[i] = args.getArg(i);
		return Tuple_Value.new(vals);
	}
//----------------------------------------------------------------------------
	def newTupleGetElem(tupleType: Type, index: int) -> Operator {
		var tt = [tupleType];
		return newOp1(Opcode.TupleGetElem, tt, tt, Lists.get(tupleType.nested, index), evalTupleGetElem, index);
	}
	def evalTupleGetElem(index: int, args: Arguments) -> Result {
		var tuple = args.getArg(0);
		if (tuple == Values.BOTTOM) return Values.BOTTOM;
		return (Tuple_Value.!(tuple)).values[index];
	}
//----------------------------------------------------------------------------
	def newNullCheck(rtype: Type) -> Operator {
		var tt = [rtype];
		return newOp0(Opcode.NullCheck, tt, tt, rtype, evalNullCheck);
	}
	def evalNullCheck(v: void, args: Arguments) -> Result {
		var obj = args.getArg(0);
		if (obj == null) return args.throw(V3Exception.NullCheck, null);
		return obj;
	}
//----------------------------------------------------------------------------
	def newBoundsCheck(rtype: Type) -> Operator {
		return newOp0(Opcode.BoundsCheck, [rtype], [rtype, Int.TYPE], Void.TYPE, evalBoundsCheck);
	}
	def evalBoundsCheck(v: void, args: Arguments) -> Result {
		var array = Record.!(args.getArg(0));
		var index = Int.unbox(args.getArg(1));
		if (array == null) return args.throw(V3Exception.NullCheck, null);
		if (index < 0 || index >= array.values.length) return args.throw(V3Exception.BoundsCheck, null);
		return null;
	}
//----------------------------------------------------------------------------
	def newCallClassVirtual(methodRef: IrSpec) -> Operator {
		var typeArgs = methodRef.typeArgs, ftype = methodRef.getUnboundType();
		var paramTypes = Function.getParamTypeArray(ftype);
		return newOp1(Opcode.CallClassVirtual, typeArgs, paramTypes, Function.getReturnType(ftype), evalCallClassVirtual, methodRef.member);
	}
	def evalCallClassVirtual(member: IrMember, args: Arguments) -> Result {
		var r = evalClassGetVirtual(member, args);
		if (Closure.?(r)) {
			var del = Closure.!(r);
			return args.fwCall(del.memberRef, del.val, 1, args.numArgs());
		}
		return r;
	}
//----------------------------------------------------------------------------
	def newCallMethod(methodRef: IrSpec) -> Operator {
		var typeArgs = methodRef.typeArgs;
		var ftype = if (V3.isComponent(methodRef.container), methodRef.getBoundType(), methodRef.getUnboundType());
		var paramTypes = Function.getParamTypeArray(ftype);
		return newOp1(Opcode.CallMethod, typeArgs, paramTypes, Function.getReturnType(ftype), evalCallMethod, methodRef.member);
	}
	def evalCallMethod(member: IrMember, args: Arguments) -> Result {
		var spec = evalIrSpec(member, args);
		if (V3.isComponent(member.container)) {
			return args.fwCall(spec, null, 0, args.numArgs());
		}
		var obj = getRecordForCall(args);
		if (member.container.typeCon.kind == V3Kind.CLASS && obj == null) {
			return args.throw(V3Exception.NullCheck, null);
		}
		return args.fwCall(spec, obj, 1, args.numArgs());
	}
	def getRecordForCall(args: Arguments) -> Record {
		// TODO: this a giant hack for adapting arguments to void calls
		var r = args.getArg(0);
		if (Record.?(r)) return Record.!(r);
		if (Tuple_Value.?(r)) return Record.!(Tuple_Value.!(r).values[0]);
		if (r != null) args.throw(V3Exception.InternalError, "invalid arg to call");
		return null;
	}
//----------------------------------------------------------------------------
	def newCallClosure(ftype: Type) -> Operator {
		var fTypes = Function.getParamTypeArray(ftype);
		var paramTypes = Arrays.prepend(ftype, fTypes);
		return newOp0(Opcode.CallClosure, [ftype], paramTypes, Function.getReturnType(ftype), evalCallClosure);
	}
	def evalCallClosure(v: void, args: Arguments) -> Result {
		return args.throw(V3Exception.InternalError, "CallClosure should not be directly evaluated");
	}
//----------------------------------------------------------------------------
	def newCallFunction(ftype: Type) -> Operator {
		ftype = Function.funcRefType(Function.prependParamType(AnyObject.TYPE, ftype));
		if (ftype.typeCon.kind != V3Kind.FUNCREF) return V3.fail("only function types allowed");
		var paramTypes = Arrays.prepend(ftype, Function.getParamTypeArray(ftype));
		return newOp0(Opcode.CallFunction, [ftype], paramTypes, Function.getReturnType(ftype), evalCallFunction);
	}
	def evalCallFunction(v: void, args: Arguments) -> Result {
		return args.throw(V3Exception.InternalError, "CallFunction should not be directly evaluated");
	}
//----------------------------------------------------------------------------
	def newCreateClosure(methodRef: IrSpec, closure: Type) -> Operator {
		var typeArgs = methodRef.typeArgs;
		return newOp1(Opcode.CreateClosure, typeArgs, [closure], methodRef.getBoundType(), evalCreateClosure, methodRef.member);
	}
	def evalCreateClosure(member: IrMember, args: Arguments) -> Result {
		return Closure.new(args.getArg(0), evalIrSpec(member, args));
	}
//----------------------------------------------------------------------------
	def newVariantGetTag(vtype: Type) -> Operator {
		if (vtype.typeCon.kind == V3Kind.ENUM) {
			// enums are directly represented as integers.
			return newTypeSubsume(vtype, V3.getVariantTagType(vtype));
		}
		var vt = [vtype];
		return newOp1(Opcode.VariantGetTag, vt, vt, V3.classDecl(vtype).tagType, evalVariantGetTag, ());
	}
	def evalVariantGetTag(v: void, args: Arguments) -> Result {
		var val = args.getArg(0);
		return if(Record.?(val), Int.box(V3.getVariantTag(Record.!(val).rtype)));
	}
//----------------------------------------------------------------------------
	def newConditionalThrow(exception: string) -> Operator {
		return newOp1(Opcode.ConditionalThrow, NONE, [Bool.TYPE], Void.TYPE, evalConditionalThrow, exception);
	}
	def evalConditionalThrow(exception: string, args: Arguments) -> Result {
		if (Bool.unbox(args.getArg(0))) return args.throw(exception, null);
		return Values.BOTTOM;
	}
//----------------------------------------------------------------------------
	def newVstSugar(op: VstOperator, typeArgs: Array<Type>, paramTypes: Array<Type>, resultType: Type) -> OperatorOf<VstOperator> {
		return OperatorOf.new(Opcode.VstSugar, typeArgs, paramTypes, resultType, op, evalVstSugar);
	}
	def evalVstSugar(op: VstOperator, args: Arguments) -> Result {
		return args.throw(V3Exception.InternalError, "unimplemented sugar");
	}
}
