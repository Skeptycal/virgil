// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

class Member_TypeCon extends TypeCon {
	new(name: string, kind: int, arity: int, typeCache: TypeCache) 
		super(name, kind, arity, typeCache) { }
	def lookupMember(t: Type, name: string, receiver: bool) -> LookupResult { return LookupResult.None; }
	def lookupInfix(infix: byte, rtype: Type) -> Operator { return null; }
}

class Syscall_TypeCon extends Member_TypeCon {
	def syscalls = Strings.newMap<(Operator, List<TypeParam>)>();
	new(name: string) super(name, V3Kind.VOID, 0, TypeUtil.globalCache) { }
	def lookupMember(t: Type, name: string, receiver: bool) -> LookupResult {
		if (!receiver) {
			var t = syscalls[name];
			if (t.0 != null) return LookupResult.Inst(t.0, t.1);
		}
		return LookupResult.None;
	}
	def add(name: string, eval: (string, Arguments) -> Result, paramTypes: Array<Type>, returnType: Type) {
		syscalls[name] = (OperatorOf.new(Opcode.SystemOp, TypeUtil.NO_TYPES, Function.siga(paramTypes, returnType), name, eval), null);
	}
}
